[
{
	"uri": "https://pythonbiellagroup.it/it/gestire-versioni-di-python/",
	"title": "Gestire Versioni Di Python",
	"tags": ["versions", "pyenv"],
	"description": "",
	"content": "Sezione 1 Gestire le versioni di Python In questa prima sezione vediamo come gestire le proprie installazioni di python all\u0026rsquo;interno della macchina sfruttando: pyenv\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/gestire-dipendenze/",
	"title": "Gestire Dipendenze",
	"tags": ["versions", "venv", "dipendenze"],
	"description": "",
	"content": "Sezione 2 Gestione delle dipendenze Per gestire le dipendenze da Python 3.3 esiste un built-in module chiamato venv che consente di creare dei virtualenv all\u0026rsquo;interno del vostro progetto.\nQuesta ovviamente è la \u0026ldquo;vecchia maniera\u0026rdquo; però è sempre funzionante\npython -m venv my-virtualenv Il comando consente di creare una directory my-virtualenv che contiene:\n python binary pip/easy_install/wheel binary activation script binary files utilizzate da Python  Per attivare un virtualenv si può fare:\n#Su Linux o Mac source ./my-virtualenv/bin/activate  #Su windows my-virtualenv\\Scripts\\activate.bat  #Disattivare virtualenv deactivate I virtualenv sono molto comodi e si possono usare in combinazione con i file requirements.txt\nCertamente è un metodo molto comodo, tuttavia ci sono degli strumenti più potenti ed efficaci per gestire il proprio ambiente.\npyenv-virtualenv Pyenv mette a disposizione uno strumento ancora più efficace per costruire ambienti virtuali attraverso un plugin pyenv-virtualenv\n#Creare un virtualenv pyenv virtualenv 3.7.4 my-project  #lista di tutti i virtual environments pyenv virtualenvs  #attivare un virtualenv pyenv activate my-project  #disattivare un virtualenv pyenv deactivate Oltre a virtualenv e pyenv-virtualenv ci sono altri strumenti molto utili e interessanti come:\n conda (che introduce anche il conda package manager) che è molto invasivo virtualfish virtualenvwrapper pipenv: molto citato in tantissimi tutorial, ma è veramente poco mantenuto (l\u0026rsquo;ultima versione risale al 2018 con 300+ issue aperte) e può causare diversi problemi in un progetto (oltre ad esserci diverse controversie legate al progetto: https://github.com/pypa/pipenv/issues/4058) pipx: per centralizzare alcune dipendenze  "
},
{
	"uri": "https://pythonbiellagroup.it/it/struttura-di-progetto/",
	"title": "Struttura di progetto",
	"tags": ["versions", "venv", "dipendenze"],
	"description": "",
	"content": "Sezione 3 Struttura di progetto Come strutturare un progetto in Python?\nQuesta ovviamente è una domanda molto comune, ma allo stesso tempo molto difficile, non esiste una risposta corretta.\nPython non forza l\u0026rsquo;utilizzo di una determinata struttura, tuttavia ci sono alcune best practice che è possibile tenere a mente e alcune considerazioni che si possono (e spesso devono) fare.\nUn Modulo in Python è un contenitore che racchiude tutte le vostre funzioni o classe che vi serve importare da un\u0026rsquo;altra parte in modo da riciclare quello che avete scritto.\nQuando si lavora con i moduli e con altre librerie o codice la cosa più importante è prestare attenzione a due errori all\u0026rsquo;interno di un progetto\n ModuleNotFoundError : ovvero quando il file (modulo) che si cerca i importare non esiste o non è raggiungibile ImportError quando ci sono errori di circular imports  Una cosa importante con Python è che quando si importa un modulo Python cercherà le dipendenze (i moduli che si vuole importare) in 3 posti:\n Installazione e dipendenze: ovvero tutte le default folders legate ai pacchetti pip installati Alcuni path addizionali specificati nella variabile d\u0026rsquo;ambiente: PYTHONPATH Nella directory contenente gli script che si usano per invocare l\u0026rsquo;interprete. In altre parole se si lancia python ~/modulo/scripts/server.py Python cercherà i moduli da importare all\u0026rsquo;interno di ~/modulo/scripts/ . Se si lancia una sessione interattiva con python (lanciando il comando python o ipython ) verrà utilizzata la directory dove ci si trova al momento del lancio del comando.  Un modo efficace per verificare i path dove python cercherà gli eventuali moduli è fare:\nimport sys print(sys.path) Se si ottiene ModuleNotFoundError la prima cosa è provare a lanciare il comando sopra per verificare se contiene le directory che si vuole utilizzare e che dovrebbero essere lì.\nIn quel caso bisogna cercare di agire sugli import, sul PYTHONPATH per includere le proprie directory oppure provare a fare sys.path.append(\u0026quot;/module/scripts\u0026quot;) (è un po\u0026rsquo; un trick, ma potrebbe aiutare a risolvere la soluzione).\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/code-style/",
	"title": "Code Style",
	"tags": ["versions", "code", "style"],
	"description": "",
	"content": "Sezione 4 Code Style Quando si lavora su progetti e si conivide il codice con un team di lavoro è importante cercare di mantenere uno stesso stile di scrittura del codice in modo da uniformarsi ed evitare di fraintendersi.\nIn Python esistono\n PEP8 = Default python style guide PEP257 = Docstring style guide  Alcuni esempi di PEP8:\n Quando spazi si usano per l\u0026rsquo;indentazione = 4 spazi Come indentare le parentesi Lunghezza della linea di codice predefinita (79 caratteri per il codice e 72 caratteri per i commenti e docstrings) Come configurare gli import \u0026hellip;  Tuttavia nonostante le linee guida di PEP8 ci sono molte cose su cui di può discutere e che non sono chiare, lasciando spesso anche troppa libertà.\nEcco che entrano in gioco alcune librerie che aiutano nella gestione della qualità del codice.\nDocumentazione  https://pep8.org https://www.python.org/dev/peps/  "
},
{
	"uri": "https://pythonbiellagroup.it/it/documentare-il-codice/",
	"title": "Documentare il codice",
	"tags": ["documentazione", "mkdocs", "docs"],
	"description": "",
	"content": "Sezione 4s Come documentare il proprio codice Ci sono moltissimi strumenti di documentazione del codice e tanti altri modi per farlo.\nTre degli strumenti più utilizzati per documentare il proprio codice sono:\n Python classico: utilizzando docstrings, commenti , .. Sphinx MKDocs  In questa sezione vedremo il funzionamento di mkdocs per costruire documentazione automatica a partire dal proprio codice python mettendola a disposizione su un sito web.\nPerchè documentare il codice è importante? "
},
{
	"uri": "https://pythonbiellagroup.it/it/visual-studio-code/",
	"title": "Visual Studio Code",
	"tags": ["vscode", "ide", "settings", "estensioni"],
	"description": "",
	"content": "Visual Studio Code Un code editor è lo strumento essenziale per ogni programmatore e lo strumento con cui spendiamo la maggior parte del tempo.\nLa scelta di un editor con il quale scrivere codice è spesso un tema molto sensibile che suscita spesso molte diatribe tra i programmatori.\nCome sapete ci sono moltissimi editor e siete liberi di utilizzare quello che più vi piace, ma dopo diversi anni passati ad utilizzare Sublime Text e Pycharm vi suggerisco vivamente di utilizzare Visual Studio Code. (Non voglio aprire la parantesi EMACS o Vim altrimenti è la fine..)\nPerchè Visual Studio Code? Visual Studio Code è negli ultimi anni l\u0026rsquo;editor per la scrittura di codice più utilizzato e sicuramente più famoso\nSurvey del 2019 di Stack Overflow (nel 2020 non è stata fatta)\nVediamo quindi assieme alcuni vantaggi nell\u0026rsquo;usare vscode\n È OpenSource Si può usare su qualsiasi sistema operativo (anche via web come server) Potete usare tutti i linguaggi che volete È semplice, ma altamente performante È veloce È estremamente customizzabile grazie a tantissime estensioni Viene impiegato in tantissimi contesti lavorativi È largamente utilizzato e molto ben documentato Possibile fare sviluppo remoto È possibile fare live coding e pairwase coding anche a distanza Le vostre estensioni e impostazioni possono essere sincronizzate tra diversi dispositivi  Questi sono alcune delle mie considerazioni, ovviamente non ho benchmark rispetto altri editor sotto mano, vi invito comunque ad utilizzarlo e provarlo.\nRispetto a Pycharm c\u0026rsquo;è però una feature che mi manca moltissimo durante lo sviluppo, ovvero la possibilità di fare refactoring del codice in molto smart come succede appunto su Pycharm. Pur troppo la fase di refactoring su vscode è ancora spesso legata molto ad attività manuali e non ci sono tutti gli automatismi necessari.\nLa cosa che mi piace di più di VSCode è il giusto bilanciamento tra produttività e facilità, anche per chi inizia a scrivere codice.\nEstensioni suggerite da installare con il loro ID di Visual Studio Store\n bookmarks: (alefragnani.bookmarks) code spell checkers (streetsidesoftware.code-spell-checker) docker (ms-azuretools.vscode-docker) docs-markdown (docsmsft.docs-markdown) docs-preview (docsmsft.docs-preview) docs-yaml (docsmsft.docs-yaml) git graph (mhutchie.git-graph) git history (donjayamanne.githistory) git lens (eamodio.gitlens) indent-rainbow (oderwat.indent-rainbow) italian-code spell checker (streetsidesoftware.code-spell-checker-italian) jupyter (ms-toolsai.jupyter) jupyter keymap (ms-toolsai.jupyter-keymap) live-share (ms-vsliveshare.vsliveshare) markdown all in one (yzhang.markdown-all-in-one) material icon theme (pkief.material-icon-theme) postgreSQL (ms-ossdata.vscode-postgresql) pylance (ms-python.vscode-pylance) python (ms-python.python) python docstring generator (njpwerner.autodocstring) python indent (kevinrose.vsc-python-indent) rainbow brackets (2gua.rainbow-brackets) rainbow csv (mechatroner.rainbow-csv) remote development (bundle) (ms-vscode-remote.vscode-remote-extensionpack) render line endings (medo64.render-crlf) sqltools (mtxr.sqltools) swagger viewer (arjun.swagger-viewer) todo highlight (wayou.vscode-todo-highlight) todo tree (gruntfuggly.todo-tree) visual studio intellicode (visualstudioexptteam.vscodeintellicode) webhint (webhint.vscode-webhint) yaml (redhat.vscode-yaml)  Su VSCode segnaliamo anche altre configurazioni utili (che verranno discusse nelle sezioni precedenti) come:\n autosalvataggio automatico dei file uso flake8 come linter black come strumento per formattare automaticamente il codice al salvataggio bandit per controlli sulla sicurezza. devcontainers configurazioni del debugger configurazione dei virtual environments configurazioni per lo sviluppo remoto  "
},
{
	"uri": "https://pythonbiellagroup.it/it/repl/",
	"title": "REPL",
	"tags": ["REPL", "ipython"],
	"description": "",
	"content": "Sezione 6 REPL REPL vuol dire: READ - EVAL - PRINT - LOOP.\nSi riferisce a tutti gli strumenti che consentono di aprire una versione di Python daterminale e in modo dinamico provare codice e vederne subito il risultato in modo interattivo.\nPython REPL che viene installato di default insieme alla versione di python è carino, ma spesso molto basico e non conveniente da utilizzare per cose complicate.\nCi sono alcune alternative, la più comune e popolare è certamente: iPython che è lo stesso REPL che gira dietro a Jupyter Notebooks e consente di utilizzare appunto la scrittura a Notebook.\nPer installare e usare iPython è possibile fare\npip install ipython #Oppure utilizzando pipx pipx install ipython Si raccomanda di utilizzare pipx perchè è uno di quelli strumenti che si vuole utilizzare globalmente perchè serve principalmente per provare alcune funzioni o per fare alcuni test sul codice prima di scriverlo.\nVantaggi di iPython  Autocompletamento tramite tab highlight della sintassi Indentazione automatica Magic commands Tanto tanto altro  "
},
{
	"uri": "https://pythonbiellagroup.it/it/creare-pacchetti-python/",
	"title": "Creare pacchetti Python",
	"tags": ["versions", "venv", "dipendenze"],
	"description": "",
	"content": "Section 7 Cosa sono i pacchetti di python? Prima di spiegare come si può creare un pacchetto di python (python package) è importante definire cos\u0026rsquo;è in Python un pacchetto, cosa rappresenta, da cosa è composto e soprattutto perchè è importante.\nCome creare un pacchetto python? Ci sono diversi modi per creare un pacchetto python, a seconda dello strumento che vogliamo configurare e che stiamo utilizzando all\u0026rsquo;interno del nostro progetto.\nIn questa guida vedremo principalmente 2 modi (con diverse accezioni):\n Utilizzando pip Utilizzando poetry  Per capire come utilizzare e costruire i vostri pacchetti python con le due modalità citate vi invitiamo di leggere i rispettivi paragrafi all\u0026rsquo;interno di questo sotto menù.\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/code-style/black/",
	"title": "Black",
	"tags": [],
	"description": "",
	"content": "https://black.now.sh/\nBlack è un code formatter, prende i propri files e li formatta in accordo con PEP8 e PEP257 con alcune altre regole addizionali (ad esempio converte apostrofo singolo in apostrofo doppio).\nPermette di essere configurato (ad esempio mettendo --skip-string-normalization per preservare gli apostrofi singoli).\nBlack è uno strumento molto discusso e a volte molto aggressivo, ma usandolo in un team consente di uniformare la scrittura del codice rendendolo comune.\nInstallare e usare Black\n#installare black pip install black  #tuttavia è consigliato utilizzare pipx pipx install black Formattare un progetto\nblack my_project #my_project = folder di progetto Inoltre è possibile impostare black su vscode in modo da configurare lo styling al salvataggio\nPer farlo è necessario andare nelle impostazioni (settings) e modificare l\u0026rsquo;impostazione: format on save, in particolare: python: formatting provider\nhttps://marcobelo.medium.com/setting-up-python-black-on-visual-studio-code-5318eba4cd00\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/struttura-di-progetto/import-relativi/",
	"title": "Import relativi",
	"tags": [],
	"description": "",
	"content": "Esistono due modi (principali) per importare moduli in Python\n Import Assoluti: from module/models/user import get_user Import Relativi: from ..models/user import get_user  Entrambi i modi hanno vantaggi e svantaggi, personalmente consiglio l\u0026rsquo;utilizzo di Import Assoluti perchè sono più facili da leggere e da utilizzare (rendendo il codice molto più pulito e compilant).\nAnche perchè se si usano import relativi è possibile incappare in questo errore:\nValue Error: attempted relative import beyond top-level package\nQuesto succede quando si cerca di importare qualcosa da una cartella al di fuori del progetto (Da una cartella padre al di fuori della root).\nCi sono diversi modi per sistemare questo problema, ma il consiglio è sempre lo stesso: cercate di utilizzare il più possibile import assoluti.\nATTENZIONE: NON USATE MAI LA * PER IMPORTARE FUNZIONI O MODULI\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/visual-studio-code/installare-un-linter/",
	"title": "Installare un linter",
	"tags": [],
	"description": "",
	"content": "Come abbiamo visto i linter sono i vostri migliori amici per controllare, durante la scrittura del codice, che tutto sia ok.\nPer selezionare un linter andate nei comandi (premendo il tasto F1 oppure CTRL + SHIFT + P o facendo View \u0026gt; Command Palette) e scrivete: \u0026gt; python: Select Linter . Selezionate quindi il linter che più vi piace (vi consiglio flake 8 ).\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/gestire-versioni-di-python/pyenv/",
	"title": "Pyenv",
	"tags": [],
	"description": "",
	"content": "Pyenv consente di gestire diverse versioni di python installate nella vostra macchina, consentendo di gestirle in modo molto semplice e veloce.\nÈ semplice e non troppo intrusivo, inoltre potete utilizzarlo su qualsiasi sistema operativo\n Consente di cambiare la versione globale di python oppure locale per ogni progetto o utente Consente di gestire una versione locale di ogni progetto con la propria specifica versione di python Permette di fare override della versione di Python come variabili d\u0026rsquo;ambiente (non dovete più gestirle a mano Consente di ricercare diverse versioni di python e gestirle (con tox)  Alcuni aspetti molto importanti\n Non ci sono problemi di bootstrap, è costruito utilizzando script shell puri Non è necessario caricarlo all\u0026rsquo;interno della propria shell, basta inserire la sua directory nelle variabili di ambiente e funziona \u0026ldquo;da solo\u0026rdquo; Consente inoltre (ed eventualmente) di gestire in moldo più efficiente i virtualenviroments  Documentazione fatta molto bene con moltissimo supporto online\n https://github.com/pyenv/pyenv  Comandi da far vedere\n# Lista di tutte le versioni disponibili pyenv install --list  # Installare una specifica versione di python pyenv install 3.7.4  # Visualizzare tutte le versioni installate (di pyenv) pyenv versions  # Impostare una determinata versione di python globale (usata da tutto il sistema operativo) pyenv global 3.7.4  # Impostare una versione di python locale pyenv local 3.7.4 #viene creato un .python-version file # Cancellando il file .python-version si cancella la versione locale rm .python-version  #Cambiare la versione solamente per la sessione di shell esistente pyenv shell system Con pyenv abbiamo risolto il problema di cambiare velocemente e in modo efficace la versione di python installata sulla propria macchina.\nRimane il problema di gestire le dipendenze (le librerie) all\u0026rsquo;interno di progetti diversi.\nPython ha un grande problema: non si possono avere versioni multiple della stessa libreria (package) installata in una determinata versione di Python.\nEcco che entrano in gioco i virtualenvironments\nÈ importante utilizzare separati virtualenvs per ogni progetto che si fa su python, iniziando ad esercitarsi da quelli più semplici.\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/materiale-utile/",
	"title": "Materiale utile",
	"tags": ["extra"],
	"description": "",
	"content": "Sezione Extra Materiale Utile Pycon 2020: https://www.youtube.com/watch?v=ndi55Ig6-SI\u0026amp;list=PL7zLksDxo500pt5884WWGV6xxb5WqVR91\u0026amp;ab_channel=PyConUS\nBest Python 2020: https://www.youtube.com/watch?v=tqUe0gcfqAU\u0026amp;list=PLCA4Z3rehf5nDNRqo4sLC_8KgU0tymlge\u0026amp;ab_channel=PyConUS\nModern Python Developer\u0026rsquo;s toolkit: https://www.youtube.com/watch?v=WkUBx3g2QfQ\u0026amp;ab_channel=PyConUS\nModern Python Developer\u0026rsquo;s toolkit (resources): https://pycon.switowski.com/\nInstall, Uninstall and manage multiple versions of python on a mac: https://www.ianmaddaus.com/post/manage-multiple-versions-python-mac/\n5 Python Tricks da usare: https://towardsdatascience.com/5-python-tricks-you-should-start-using-in-2021-1084af21c2f2\nMedium informations and blogs to look at:\n https://betterprogramming.pub/ https://medium.com/analytics-vidhya https://towardsdatascience.com/  Jetbrains Dev Ecosystem 2020: https://www.jetbrains.com/lp/devecosystem-2020/python/\nState of 2020 language: https://fwdays.com/en/event/python-fwdays-conference/review/python-2020-the-state-of-the-language\nFase più discorsiva\nhttps://towardsdatascience.com/12-steps-to-production-quality-data-science-code-35ae2f868003\n  Code quality\nhttps://realpython.com/python-code-quality/#it-does-not-do-what-it-is-supposed-to-do\n Style guide (Code Style: https://python-docs.readthedocs.io/en/latest/writing/style.html)  PEP (novità): https://pep8.org Linter \u0026amp; Tools  Flake 8 Bandit Mypy Black        Modularizzazione del codice\n cos\u0026rsquo;è un module, come si comporta, cos\u0026rsquo;è un main    Python env\n Virtual environment  Pyenv      Project \u0026amp; Library management\n Poetry (and requirements.txt) rispetto a come si faceva prima con virtual env    Configurazione IDE (Visual Studio Code)\n Estensioni Come usare visual studio code per  Analisi Sviluppo tradizionale      Come documentare al meglio il proprio codice\nhttps://realpython.com/documenting-python-code/\nTutta la documentazione che scrivete all\u0026rsquo;interno del progetto cercate di farla in Markdown (https://guides.github.com/features/mastering-markdown/)\nCode Refactoring (Best Practise)\nhttps://www.altexsoft.com/blog/engineering/code-refactoring-best-practices-when-and-when-not-to-do-it/\nSoftware Quality (Metrics and how to use)\nhttps://www.altexsoft.com/blog/engineering/what-software-quality-really-is-and-the-metrics-you-can-use-to-measure-it/\nTest Driven Data Science Development\nhttps://towardsdatascience.com/tdd-datascience-689c98492fcc\nhttps://www.freecodecamp.org/news/learning-to-test-with-python-997ace2d8abe/\nStrumenti in Python per la generazione automatica di documentazione:\n https://lucacorbucci.medium.com/how-to-generate-a-documentation-for-python-code-using-pdoc-60f681d14d6e https://medium.com/blueriders/python-autogenerated-documentation-3-tools-that-will-help-document-your-project-c6d7623814ef https://realpython.com/generating-code-documentation-with-pycco/  Bonus e considerazioni BONUS: Far vedere anche su mac come funziona poetry + pyenv alla fine\nAttenzione: testare pyenv + poetry con windows + subsystem linux + macchina virtuale linux\nQuando un progetto nasce classico (utilizzando virtualenv e venv) lasciarlo così\u0026hellip;fare la migrazione a Poetry può essere complicato.\nSi consiglia di utilizzare python versione 3.8 (3.7 già vecchia e 3.9 ancora troppo nuova).\nIntegrazione Poetry with Docker\nhttps://stackoverflow.com/questions/53835198/integrating-python-poetry-with-docker\nhttps://pythonspeed.com/articles/pipenv-docker/\nAssolutamente da vedere:\nhttps://pythonspeed.com\nPython Logging (Log your code and not use print): https://python-docs.readthedocs.io/en/latest/writing/logging.html\nCommons Gotcha (concetti generali interessanti): https://python-docs.readthedocs.io/en/latest/writing/gotchas.html\nPackaging your code: https://python-docs.readthedocs.io/en/latest/shipping/packaging.html\nFreezing your code: https://python-docs.readthedocs.io/en/latest/shipping/freezing.html\nTwo cool functions to know in python\n tabulate tqdm  https://towardsdatascience.com/two-cool-functions-to-know-in-python-7c36da49f884\nAltri temi\n come andare in produzione con poetry + docker (integrando code quality processes): https://pythonspeed.com/articles/pipenv-docker/ Speed up your code: https://pythonspeed.com/performance/ Process large dataset without running out of memory: https://pythonspeed.com/memory/ Deploy  Console application (desktop application) → come creare app in locale (Build + Install) Webpage Mobile app    Strutturare il tuo progetto Come strutturare il tuo progetto\nhttps://python-docs.readthedocs.io/en/latest/writing/structure.html\nSemantic release https://python-semantic-release.readthedocs.io/en/latest/\nhttps://mestrak.com/blog/semantic-release-with-python-poetry-github-actions-20nn\nPrettier https://www.reddit.com/r/vscode/comments/95lsb8/a_better_python_formatter/\nhttps://stackoverflow.com/questions/65410758/problem-formatting-python-when-using-prettier-in-vscode\nhttps://dev.to/eegli/quick-guide-to-python-formatting-in-vs-code-2040\nhttps://www.digitalocean.com/community/tutorials/code-formatting-with-prettier-in-visual-studio-code\nhttps://stackoverflow.com/questions/57907645/prettier-not-formatting-html-files-in-vs-code\n#Prettier configuration: .prettierrc {  \u0026#34;arrowParens\u0026#34;: \u0026#34;avoid\u0026#34;,  \u0026#34;endOfLine\u0026#34;: \u0026#34;lf\u0026#34;,  \u0026#34;htmlWhitespaceSensitivity\u0026#34;: \u0026#34;css\u0026#34;,  \u0026#34;insertPragma\u0026#34;: false,  \u0026#34;jsxBracketSameLine\u0026#34;: false,  \u0026#34;jsxSingleQuote\u0026#34;: false,  \u0026#34;printWidth\u0026#34;: 80,  \u0026#34;proseWrap\u0026#34;: \u0026#34;always\u0026#34;,  \u0026#34;quoteProps\u0026#34;: \u0026#34;as-needed\u0026#34;,  \u0026#34;requirePragma\u0026#34;: false,  \u0026#34;semi\u0026#34;: false,  \u0026#34;singleQuote\u0026#34;: true,  \u0026#34;tabWidth\u0026#34;: 2,  \u0026#34;useTabs\u0026#34;: false } "
},
{
	"uri": "https://pythonbiellagroup.it/it/gestire-dipendenze/virtualenv/",
	"title": "Virtualenv",
	"tags": [],
	"description": "",
	"content": "Packaging (and Enviroments) Virtualenv\nPipenv vs virtualenv: https://medium.com/@dakota.lillie/an-introduction-to-virtual-environments-in-python-ce16cda92853\nVenv: https://medium.com/@rahul3012_37725/a-very-basic-guide-to-python-virtual-environments-a53d1e191490\n# install virtualenv pip install virtualenv  #Prima di lanciare il successivo comando controllare di essere su conda e fare: conda activate development #la versione di conda che usate deve essere \u0026gt;= versione desiderata  # generate a new virtualenv in a specific path virtualenv --python=3.6 \u0026lt;path_nome_env\u0026gt;  #### UNIX (mac and linux) source \u0026lt;path_nome_env\u0026gt;/bin/activate  #### WINDOWS \u0026lt;path_nome_env\u0026gt;\\scripts\\activate  #### Visual Studio Code  #(install Microsoft Python Extension and then click on python in the bottom tab) #Windows navigate to -\u0026gt; \u0026lt;path_nome_env\u0026gt;\\scripts\\\u0026lt;python3.6\u0026gt; #UNIX navigate to -\u0026gt; \u0026lt;path_nome_env\u0026gt;/bin/\u0026lt;python3.6\u0026gt;  #Warning: if you are using another python version, change python3.6 to your current version  #Then install requirements.txt pip install -r requirements.txt Prevent conda to activate default base environment by default conda config --set auto_activate_base false\nhttps://www.youtube.com/watch?v=asL0dbN6pAY\nhttps://www.youtube.com/watch?v=1GIIaGbL9qQ\nInside the cheeseshop: How Python Packaging Works (Dustin Ingram) https://www.youtube.com/watch?v=AQsZsgJ30AE\nPEP 518: introduce il pyproject.toml che rimpiazza quasi tutto.\nPublish package to Pypi (old school)\nhttps://www.youtube.com/watch?v=GIF3LaRqgXo\u0026amp;ab_channel=CodingTech\nUse uf PipEnv\nhttps://hackersandslackers.com/pipenv-python-environment-management/\nDifferenze tra PipEnv, Pip e Conda (DevOps Concepts)\nhttps://towardsdatascience.com/devops-for-data-science-making-your-python-project-reproducible-f55646e110fa\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/gestire-dipendenze/pyenv-virtualenv/",
	"title": "Pyenv-virtualenv",
	"tags": [],
	"description": "",
	"content": "Pyenv mette a disposizione uno strumento ancora più efficace per costruire ambienti virtuali attraverso un plugin pyenv-virtualenv\n#Creare un virtualenv pyenv virtualenv 3.7.4 my-project  #lista di tutti i virtual environments pyenv virtualenvs  #attivare un virtualenv pyenv activate my-project  #disattivare un virtualenv pyenv deactivate Oltre a virtualenv e pyenv-virtualenv ci sono altri strumenti molto utili e interessanti come:\n conda (che introduce anche il conda package manager) che è molto invasivo virtualfish virtualenvwrapper pipenv: molto citato in tantissimi tutorial, ma è veramente poco mantenuto (l\u0026rsquo;ultima versione risale al 2018 con 300+ issue aperte) e può causare diversi problemi in un progetto (oltre ad esserci diverse controversie legate al progetto: https://github.com/pypa/pipenv/issues/4058) pipx: per centralizzare alcune dipendenze  "
},
{
	"uri": "https://pythonbiellagroup.it/it/code-style/flake8/",
	"title": "Flake8",
	"tags": [],
	"description": "",
	"content": "Oltre agli strumenti che consentono di formattare il codice in Python esistono diversi linter e analizzatori statici di codice.\nUno dei più popolari Linter su Python è Flake8 .\nFlake8 non cambia il codice in un progetto, ma fornisce uno strumento di warnings in real time\nFlake8 combina tre progetti differenti\n pyflakes https://github.com/pycqa/pyflakes = da warnings su moduli non usati, variabili non definite, \u0026hellip; pycodestyle https://pycodestyle.pycqa.org/en/latest/ = da errori riguardo alle violazioni di PEP8 McCabe https://github.com/pycqa/mccabe (disabilitato di default) = fornisce warnings se le funzioni sono troppo complesse o complicate  Un altro vantaggio di Flake8 che lo ha reso così popolare è il massivo catalogo di plugins ed estensioni che si possono installare ed usare per estendere le funzionalità base della libreria.\nPer un elenco completo delle estensioni: https://github.com/DmytroLitvinov/awesome-flake8-extensions\nAlcune estensioni utili:\n flake8-builtins - makes sure you don’t use Python builtins as variables or parameters flake8-bugbear - an additional set of checks (some are opinionated) that will complain when you, for example:  Use except: instead of except Exception: Use ++n Use .strip() on a multiline string Use a length-one tuple   flake8-comprehensions - helps you write better list/set/dictionary comprehensions flake8-docstrings - enforces PEP257 flake8-eradicate - reports commented out code (“dead code”) flake8-isort - check if your import statements are sorted according to the isort recommendations flake8-broken-line - complains you use backslash for line breaks (try using parenthesis or tripple quotes instead) flake8-quotes - if you prefer single quotes over double quotes (or the other way around), this plugin can help you enforce them flake8-rst-docstrings - looks for problems in your documentation (usefull if you are using Sphinx that we will talk about later) darglint - checks if your docstrings are matching functions definitions (for example, if you remembered to describe all the parameters and the return value) flake8-mutable - checks that you don’t use mutable default arguments flake8-bandit - introduce the capabilities of bandit inside flake8  Installare Flake 8\npip install flake8  #anche qui è meglio utilizzare pipx pipx install flake8  #Installare estensioni pip install flake8-docstrings flake8-isort #Ancora meglio sempre con pipx pipx inject flake8 flake8-docstrings flake8-isort flake8-bandit  # Se esce un errore di path fare pipx ensurepath # Riavviare il terminale Lanciare Flake8\nflake8 my_project #my_project = cartella di progetto Per usare al meglio Flake8 il consiglio è sempre quello di integrarlo all\u0026rsquo;interno di Visual Studio Code lanciando il comando: Python: Select Linter\nPer progetti grandi e per configurare al meglio Flake8 con tutti i suoi plugin è possibile utilizzare anche l\u0026rsquo;ottima libreria: FlakeHell che è un wrapper che consente di definire un pyproject.toml file (lo stesso di Poetry) e di personalizzare le impostazioni al suo interno.\nAttenzione: la libreria di FlakeHell non è piu aggiornata dal 2019 (è archiviata su github) tuttavia è stabile e perfettamente utilizzabile\n FlakeHell: https://github.com/life4/flakehell Esempio: https://dev.to/bowmanjd/using-flake8-and-pyproject-toml-with-flakehell-1cn1  Ci sono tantissimi altri strumenti che consentono di controllare il codice e di segnalare eventuali errori man mano che lo state scrivendo.\n pylint pydocstyle bandit vulture wemake-python-style guide prospector  Tuttavia vi consiglio di utilizzare Flake8 e Blake nei vostri progetti e di inserire anche Bandit\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/struttura-di-progetto/import-circolari/",
	"title": "Import circolari",
	"tags": [],
	"description": "",
	"content": "Import circolari Questo è un problema molto grave in un progetto e l\u0026rsquo;errore accade quando a partire da un modulo si cerca di importare l\u0026rsquo;altro e viceversa (crendo appunto una circolarità negli import).\n# file_a.py from file_b import hello_world  def hello():  return \u0026#34;hello\u0026#34;  def first_program():  return hello_world()  first_program() # file_b.py from file_a import hello  def hello_world():   return hello() + \u0026#34; world\u0026#34; Quando si lancia python file_a.py si avrà il seguente errore:\nTraceback (most recent call last):  File \u0026#34;file_a.py\u0026#34;, line 1, in \u0026lt;module\u0026gt;  from file_b import hello_world  File \u0026#34;/my_module/file_b.py\u0026#34;, line 2, in \u0026lt;module\u0026gt;  from file_a import hello  File \u0026#34;/my_module/file_a.py\u0026#34;, line 1, in \u0026lt;module\u0026gt;  from file_b import hello_world ImportError: cannot import name \u0026#39;hello_world\u0026#39; Ci sono anche qui molti modi per fixare questi problemi di import circolari, fate attenzione però a quando scrivete il codice in modo tale che non si verifichino questi problemi.\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/gestire-versioni-di-python/pyenv-avanzato/",
	"title": "Pyenv avanzato",
	"tags": [],
	"description": "",
	"content": "In questa sezione avanzata sono presenti appunti, best practice e guide per approfondire tutto ciò che riguarda Pyenv\nDocumentazione utile https://realpython.com/intro-to-pyenv/\nPyenv con poetry\nhttps://blog.jayway.com/2019/12/28/pyenv-poetry-saviours-in-the-python-chaos/\nGuida per configurare pyenv su Mac\nhttps://opensource.com/article/20/4/pyenv\nNotes su un Github Gist\nhttps://gist.github.com/Geoyi/f55ed54d24cc9ff1c14bd95fac21c042\nPyenv è un gestore di installazione di python. Permette di installare e eseguire più installazioni di python sulla stessa macchina.\nPyenv gestisce le differenti versioni di python per te, in modo da evitare il chaos di dipendenze, versioni e installazioni illustrato nell\u0026rsquo;immagine iniziale.\nPerchè non utilizzare python installato di default nel proprio sistema operativo?\n Perchè possono creare problemi nei progetti, ognuno ha la propria versione e ci possono essere problemi di migrazione e riproducibilità quando si usano in contesti di produzione.  Cosa ci consente di fare pyenv? (flusso operativo)\n installare Python nel proprio user space installare versioni multiple di python specificare quale esatta versione di python utilizzare per un progetto e/o attività cambiare tra le diverse versioni installate facilmente  Installare Pyenv Per installare Pyenv vi rimandiamo alla documentazione ufficiale su Github.\nQuesto perchè le modalità di installazione cambiano a seconda della versione e del sistema operativo e stare al passo con gli aggiornamenti è sempre complicato.\nPiù avanti in questa guida trovate esempi di utilizzo con Pyenv più avanzati.\nLa guida di riferimento per l\u0026rsquo;installazione la potete trovare: qui\nVerificare installazione di Pyenv\nUna volta installato e configurato correttamente sul vostro terminale terminale fare:\npyenv --version Install Python Visualize python versions\npyenv install --list | grep \u0026#34; 3\\.[678]\u0026#34; pyenv install -v 3.7.2 Visualizzare dove vengono installate le varie versioni su Python\nls ~/.pyenv/versions/ Disinstallare una versione di Python\npyenv uninstall \u0026lt;version\u0026gt; Ogni volta che su windows (e altri sistemi operativi) si installa una nuova versione di Python con pyenv è importante anche fare rehash\n#rehash to update shims pyenv rehash Disinstallare una versione di python\n#visualizzare le versioni di pyenv installate pyenv versions  #disinstallare una determinata versione pyenv uninstall \u0026lt;versione\u0026gt; Usare una versione di Pyenv #Visualize the installed (available) versions pyenv versions  #Visualize the active version of python with pyenv pyenv which python  #Set a global pyenv version pyenv global \u0026lt;version\u0026gt;  #If you want to come back to the system default pyenv global system È anche possibile impostare una versione di pyenv python locale per ogni progetto facendo all\u0026rsquo;interno della cartella di progetto:\npyenv local \u0026lt;version\u0026gt; Oppure impostare la versione di una determinata shell\npyenv shell \u0026lt;version\u0026gt; IMPORTANTE IN WINDOWS 10 Dopo aver installato la versione di Python global di pyenv è necessario eliminare dalla variabile di ambiente PATH i riferimenti al Python base installato inizialmente.\nVirtualenvs with pyenv Pyenv ha un bellissimo plugin chiamato: pyenv-virtualenv che consente di gestire appunto i vari virtualenv in modo semplice.\nCi sono diversi modi per gestire un virtualenv (pyenv consente di gestirli tutti e 3 in modo molto semplice e comodo)\n pyenv manages multiple versions of Python itself. virtualenv/venv manages virtual environments for a specific Python version. pyenv-virtualenv manages virtual environments for across varying versions of Python.  Creare un virtualenv\npyenv virtualenv \u0026lt;python_version\u0026gt; \u0026lt;environment_name\u0026gt;  #\u0026lt;pythonversion\u0026gt; is optional Attivare un virtualenv\npyenv local myproject  #verify python version pyenv which python  #verify pip version pyenv which pip È quindi possibile attivare o disattivare un particolare ambiente (virtualenv) (un po\u0026rsquo; come succede con anaconda)\npyenv activate \u0026lt;environment_name\u0026gt;  pyenv deactivate Con pyenv è anche possibile utilizzare più versioni di python contemporaneamente\u0026hellip;\nPyenv with Poetry https://blog.jayway.com/2019/12/28/pyenv-poetry-saviours-in-the-python-chaos/\nBonus: utilizzare oh-my-zsh È possibile utilizzare pyenv come plugin su oh-my-zsh in modo molto comodo inserendo pyenv all\u0026rsquo;interno dei plugin nel file di configurazione.\nInformazione: Impedire a conda di partire di default\nconda config --set auto_activate_base false\nLibrerie base da installare Elenco delle librerie base da installare (necessario creare progetto base per configurare queste librerie)\n Bandit Black Poetry Flake8 Mypy Isort Pylint Pytest  A tal proposito sui vostri progetti suggeriamo di utilizzare Poetry per gestire le dipendenze e le librerie necessarie (sia di sviluppo che di produzione.\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/visual-studio-code/utilizzare-una-versione-di-python/",
	"title": "Utilizzare una versione di Python",
	"tags": [],
	"description": "",
	"content": "Quando siete all\u0026rsquo;interno di un progetto e aprite un file .py vi verrà chiesto di utilizzare una particolare versione di python che potete anche visualizzarla in basso a destra su vscode (ovviamente dovete installare almeno l\u0026rsquo;estensione Python prima). Premendo sulla scritta potrete selezionare una determinata versione di Python.\nAprendo sempre la Command Palette (premendo il tasto F1 oppure CTRL + SHIFT + P o facendo View \u0026gt; Command Palette ) potete scrivere : \u0026gt; python: Select Interpreter per selezionare l\u0026rsquo;interprete python che più vi aggrada (ad esempio il vostro .venv all\u0026rsquo;interno della cartella).\nAll\u0026rsquo;interno del progetto potete anche creare un file: settings.json all\u0026rsquo;interno della cartella .vscode in modo da specificare il path del vostro interprete\n{  \u0026#34;python.pythonPath\u0026#34;: \u0026#34;/Users/jeydi/Progetti/mioprogetto/.venv/bin/python\u0026#34; } "
},
{
	"uri": "https://pythonbiellagroup.it/it/code-style/bandit/",
	"title": "Bandit",
	"tags": [],
	"description": "",
	"content": "Bandit è uno strumento per trovare problemi di sicurezza più comuni all\u0026rsquo;interno del codice Python.\nUtilizzandolo così com\u0026rsquo;è però, senza un\u0026rsquo;adeguata configurazione, fornisce anche un po\u0026rsquo; di falsi positivi.\nSpendendo un po\u0026rsquo; di tempo a configurarlo correttamente per i vostri progetti è possibile avere informazioni utili riguardo:\n utilizzo insicuro di alcuni moduli possibili SQL Injection se il codice ignora silenziosamente alcune eccezioni e molto altro  È un utilissimo strumento soprattutto per principianti per revisionare il proprio codice.\nPer usare bandit il consiglio è quello di installare l\u0026rsquo;estensione di Flake8 flake8-bandit in modo da non dover installare e usare bandit separatamente, ma integrandolo direttamente nel vostro progetto.\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/gestire-dipendenze/poetry/",
	"title": "Poetry",
	"tags": [],
	"description": "",
	"content": "https://python-poetry.org/\nPoetry è un nuovo modo di gestire progetti con Python che si adatta ai linguaggi e ai framework moderni più famosi (come ad esempio node con npm o nuget per .NET)\nÈ a tutti gli effetti un package and dependency management tool che consente quindi di gestire pacchetti, dipendenze, versioni unendo sia la gestione della versione di python in un determinato progetto con le rispettive dipendenze oltre ad introdurre concetti molto più avanzati.\nLe feature più importanti introdotte da Poetry sono:\n gestione del progetto e delle librerie in modo deterministico (e agile) facilità di costruire builds e package per il progetto con comandi configurabili pubblicare pacchetti velocemente su pypi traccia le dipendenze di progetto con un singolo comando  È un progetto nuovo, ci sono ancora diverse issue aperte, ma la community è veramente molto attiva e stanno proponendo soluzioni sempre migliori oltre ad essere già stabile (e sicuro) per essere usato anche in produzione.\nCome usare Poetry Il cuore di Poetry è il file pyproject.toml che viene creato all\u0026rsquo;interno del progetto al momento dell\u0026rsquo;inizializzazione.\nQuesto file consente di definire tutte le caratteristiche di progetto e di gestire l\u0026rsquo;intero progetto (come se usassimo un package.json su javascript per intenderci)\nVediamo quindi come usare Poetry in un nuovo progetto\n# Inizializzare poetry all\u0026#39;interno di una cartella poetry init  # Oppure creare un nuovo progetto poetry new \u0026lt;app_name\u0026gt;  # All\u0026#39;interno del progetto modificare il file: pyproject.tml come desiderate  # Se vuoi utilizzare un venv all\u0026#39;interno del progetto fare: poetry config virtualenvs.in-project true # Se non si usa questa impostazione rimarrà all\u0026#39;interno della cartella generale di poetry  # Compilare il file pyproject.toml per creare il venv di progetto poetry shell  # Aggiungere nuove dipendenze (al pyproject.toml) poetry add pandas  # Installare dipendenze (in automatico aggiunte al pyproject.toml) poetry install  # lanciare un file poetry run \u0026lt;script\u0026gt;  # Visualizzare il path di dove si trova il venv di quel progetto (e anche l\u0026#39;elenco delle librerie) poetry show -v  #Uscire da una shell lanciata da poetry exit Attenzione: su windows utilizzando PowerShell quando fate: poetry shell in automatico vi butta fuori da powershell e vi farà usare cmd.\nÈ un bug noto e comunque c\u0026rsquo;è un modo per risolverlo (un workaround)\nhttps://github.com/python-poetry/poetry/issues/2030\nCome usare poetry in un progetto già esistente?\nMagari che contiene già un requirements.txt file\n# Inizializzare poetry all\u0026#39;interno di una directory poetry init  # Se vuoi mantenere il .venv all\u0026#39;interno della cartella di progetto fare: poetry config virtualenvs.in-project true  ## Import requirements.txt libraries all\u0026#39;interno di poetry poetry add $( cat requirements.txt )  # Se non esiste un requirements.txt continuare con classico format Generate poetry requirements.txt\n#Creare un file requirements.txt dalla configurazione di poetry poetry export -f requirements.txt --output requirements.txt Esempio di pyproject.toml\n[tool.poetry] name = \u0026#34;poetry-tutorial-project\u0026#34; version = \u0026#34;0.1.0\u0026#34; description = \u0026#34;Simple python project built with poetry\u0026#34; authors = [\u0026#34;Andrea Guzzo \u0026lt;andrea.guzzo92@gmail.com\u0026gt;\u0026#34;] maintainers = [\u0026#34;Andrea Guzzo \u0026lt;andrea.guzzo92@gmail.com\u0026gt;\u0026#34;] license = \u0026#34;MIT\u0026#34; readme = \u0026#34;README.md\u0026#34; homepage = \u0026#34;http://localhost:5000\u0026#34; repository = \u0026#34;https://github.com/jeydi/\u0026#34; documentation = \u0026#34;https://github.com/jeydi/\u0026#34; keywords = [ \t\u0026#34;Poetry\u0026#34;, \t\u0026#34;Venv\u0026#34;, \t\u0026#34;Virtual enviroments\u0026#34;, \t\u0026#34;Packages\u0026#34;, \t\u0026#34;Packaging\u0026#34; ]  [tool.poetry.dependencies] python = \u0026#34;^3.7\u0026#34; loguru = \u0026#34;*\u0026#34; psutil = \u0026#34;*\u0026#34; pandas = \u0026#34;*\u0026#34; numpy = \u0026#34;*\u0026#34; fastapi = \u0026#34;*\u0026#34; typer = \u0026#34;^0.3.2\u0026#34;  [tool.poetry.dev-dependencies] pytest = \u0026#34;^5.2\u0026#34;  [build-system] requires = [\u0026#34;poetry-core\u0026gt;=1.0.0\u0026#34;] build-backend = \u0026#34;poetry.core.masonry.api\u0026#34;  [tool.poetry.scripts] run = \u0026#34;wsgi:main\u0026#34;  [tool.poetry.urls] issues = \u0026#34;https://github.com/jeydi/\u0026#34; Attenzione: Per alcune librerie (ad esempio pandas), potrebbero esserci dei problemi di versionamento rispetto alle librerie dipendenti. A tal proposito si consiglia di installare anche pip come dipendenza e aggiornarlo all\u0026rsquo;ultima versione.\n#Installare pip poetry add pip #Oppure aggiornare pip una volta creato il .venv con poetry #Importante avere prima il .venv pip install --upgrade pip Questo è un workaround per superare problemi di installazione molto lunga.\nPoetry è sicuramente più lento di virtualenv, ma è molto più sicuro e più severo in quanto prima controlla tutte le dipendenze verificando che siano sicure.\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/visual-studio-code/aggiungere-code-al-terminale/",
	"title": "Aggiungere code al terminale",
	"tags": [],
	"description": "",
	"content": "Una feature molto interessante di visual studio code è l\u0026rsquo;aggiunta del comando code \u0026lt;file_or_folder\u0026gt; all\u0026rsquo;interno del terminale che vi aprirà una finestra di vscode in base al file o alla cartella su cui volete lavorare (ad esempio facendo code . potrete aprire la cartella corrente all\u0026rsquo;interno di vscode).\nPer farlo aprite la Command Palette e lanciate (cercando) il seguente comando: Shell command: Install ‘code’ command in the PATH\nSu windows è possibile installare la funzionalità anche flaggando Add to PATH durante la fase di installazione di vscode.\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/struttura-di-progetto/cookiecutter/",
	"title": "cookiecutter",
	"tags": [],
	"description": "",
	"content": "Tornando al discorso originale di struttura di progetto in python (e in tanti altri linguaggi e/o framework) ogni progetto è differente, ma alcuni progetti condividono tra di loro alcuni elementi comuni.\nAd esempio spesso hanno un file con una lista di dipendenze e alcuni test, un\u0026rsquo;applicazione web ha bisogno di un \u0026ldquo;main\u0026rdquo;, oppure abbiamo bisogno per il nostro team di avere una struttura che guidi lo sviluppo in modo da uniformarci tra diversi progetti (o almeno cercare di farlo).\nEcco qui che entra in gioco lo scaffolding .\nScaffolding (in italiano: impalcatura) è un concetto che arriva appunto dal settore delle costruzioni, quando vogliamo costruire qualcosa, ripararlo o modificarlo, abbiamo bisogno di un\u0026rsquo;impalcatura attorno al progetto che aiuti a tenerlo.\nIn Informatica questo concetto è simile: prima di costruire un progetto abbiamo bisogno di una struttura pronta che ci consenta di procedere in modo ordinato durante lo sviluppo.\nEcco quindi che entra in gioco: cookiecutter\nCookiecutter è uno strumento che consente di creare un progetto Python a partire da un template esistente (esistono versioni simili anche in tanti altri linguaggi di programmazione ed editor).\nhttps://github.com/cookiecutter/cookiecutter\nDocumentation: https://cookiecutter.readthedocs.io/en/1.7.2/\nPer utilizzarlo:\n Si seleziona un template da utilizzare per il progetto Si lancia cookiecutter con l\u0026rsquo;indirizzo del progetto e verranno chieste dal tool alcune domande per personalizzare la creazione del progetto Scaffolding con cookiecutter genererà il template per voi  Installiamo cookiecutter (meglio farlo con pipx in modo da usarlo globalmente dappertutto)\npipx install cookiecutter Elenco curato di possibili templates per i vostri progetti (ne trovate molti online)\n https://github.com/cookiecutter/cookiecutter#a-pantry-full-of-cookiecutters  #Cloniamo un progetto con cookiecutter cookiecutter https://github.com/audreyr/cookiecutter-pypackage Cookiecutter è uno strumento molto utile, ma bisogna fare attenzione a come lo si usa e a quali progetti si utilizzano. Spesso può installare e scaricare tantissime cose di cui non abbiamo bisogno o che sono ridondanti.\nIl consiglio è di selezionare dei progetti che fanno per voi in base al progetto che state pensando di utilizzare (piccolo, medio, grande). Oppure scrivere dei template per i vostri progetti o organizzazione in modo da essere tutti d\u0026rsquo;accordo su quello che volete fare.\nCostruire un proprio cookiecutter template Vediamo alcuni passi per costruire un proprio template semplice con cookiecutter.\nLa documentazione a tal proposito non è fatta benissimo e manca di aggiornamenti, ma è comunque possibile trovare molti esempi online.\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/gestire-dipendenze/poetry-advance/",
	"title": "Poetry Advance",
	"tags": [],
	"description": "",
	"content": "Poetry è il più sofisticato sistema di gestione delle dipendenze su Python disponibile (nel 2020).\nConsente di andare al di là della semplice gestione delle dipendenze, con funzioni come: generare .lock files, consentire di fare scaffolding dei progetti con molte possibilità di personalizzazione, il tutto disponibile via CLI.\nInstallare poetry e includere l\u0026rsquo;installazione Per installare Poetry è importante fare riferimento alla guida ufficiale che descrive i passi per i vari sistemi operativi.\nNon riportiamo volutamente i passi necessari all\u0026rsquo;installazione siccome cambiano spesso con i nuovi aggiornamenti e le nuove versioni.\nA tal proposito il sito di riferimento è: documentazione ufficiale\nCreare un progetto python utilizzando Poetry poetry new poetry-tutorial-project La ricetta segreta di ogni progetto costruito con poetry è la creazione di un file chiamato pyproject.toml . All\u0026rsquo;interno di questo file è possibile definire tutto quello che esiste all\u0026rsquo;interno del progetto: metadati, dipendenze, librerie, scripts e molto altro\u0026hellip;\nSe siete a vostro agio con node.js possiamo considerare il file pyproject.toml come un package.json del progetto.\nComposizione di poetry (file toml)\nDocumentazione: https://python-poetry.org/docs/pyproject/\n [tool.poetry] = semplice metadato informativo riguardo al package che state sviluppando (come il package name, descrizione, autore, dettagli, \u0026hellip;). Alcune impostazioni sono utili solamente se pensate di pubblicare il vostro pacchetto su Pypi. [tool.poetry.dependencies] = Consente di definire le dipendenze dell\u0026rsquo;applicazione che sono assolutamente necessarie per lanciare il vostro programma. È anche possibile impostare una versione particolare del pacchetto che volete installare (such as Flask = \u0026ldquo;1.0.0\u0026rdquo;), Se invece si vuole semplicemente definire l\u0026rsquo;ultima versione è possibile inserire solamente \u0026ldquo;*\u0026rdquo;. È anche possibile specificare la versione di Python richiesta per lanciare il progetto e la vostra applicazione. [tool.poetry.dev-dependencies] = Le Dev dependencies sono tutte le librerie che servono agli sviluppatori per costruire e programmare il progetto, ma che non devono essere portare in produzione. Queste dipendenze non servono per lanciare l\u0026rsquo;applicazione e non verranno scaricate se l\u0026rsquo;applicazione viene \u0026ldquo;buildata\u0026rdquo; di default. [build-system] = Questa sezione è raramente utilizzata, modificatela solamente se avete intenzione di aggiornare Poetry. [tool.poetry.scripts] = Qui è dove si specificano gli entry point dell\u0026rsquo;applicazione, assegnando una funzione all\u0026rsquo;interno dei moduli necessaria a lanciare l\u0026rsquo;applicazione. L\u0026rsquo;esempio utilizza: run = \u0026ldquo;wsgi:main\u0026rdquo; che specifica che vogliamo creare un comando \u0026ldquo;run\u0026rdquo; che cercherà all\u0026rsquo;interno del file: \u0026ldquo;wsgi.py\u0026rdquo; una funzione chiamata: main(). Con questa impostazione è possibile lanciare l\u0026rsquo;applicazione utilizzando la CLI scrivendo: poetry run [tool.poetry.urls]: Questa impostazione è opzionale e può essere utilizzata per inserire link utili di risorse, documentazione o altro legato al progetto e importanti se volete rilasciare il vostro pacchetto.  Installare e gestire le dipendenze poetry shell\nLa prima volta che questo comando viene eseguito nella directory del tuo progetto, Poetry crea un ambiente virtuale Python che sarà per sempre associato a questo progetto. Invece di creare una cartella contenente le tue librerie di dipendenza (come fa virtualenv), Poetry crea un ambiente su un percorso di sistema globale, separando così il codice sorgente di dipendenza dal tuo progetto. Una volta che questo ambiente virtuale è creato, può essere attivato di nuovo in qualsiasi momento semplicemente eseguendo poetry shell nella directory del tuo progetto in futuro. Prova a confrontare l\u0026rsquo;output di python prima e dopo aver attivato la shell del tuo progetto per vedere come Poetry gestisce gli ambienti virtuali.\n**poetry install**\nInstalla le dipendenze specificate in pyproject.toml. La prima volta che le dipendenze di un progetto vengono installate, viene creato un file .lock, che contiene i numeri di versione effettivi di ogni pacchetto che è stato installato (ad esempio: se Flask = \u0026ldquo;*\u0026rdquo; ha portato a scaricare Flask versione 1.0.0, il numero di versione effettivo verrebbe memorizzato in .lock). Se è presente un file .lock, i numeri di versione in .lock avranno sempre la priorità su quelli presenti in pyproject.toml.\n**poetry update**\nImita la funzionalità di install, con l\u0026rsquo;eccezione che i numeri di versione in .lock NON saranno rispettati. Se esistono versioni più recenti per i pacchetti in pyproject.toml, saranno installate le versioni più recenti e .lock sarà aggiornato di conseguenza.\n**poetry add [package-name]**\nUna scorciatoia per aggiungere una dipendenza a pyproject.toml. Il pacchetto viene installato immediatamente dopo essere stato aggiunto.\n**poetry remove [package-name]**\nComando per rimuovere una determinata dipendenza dalla lista delle dipendenze del progetto definite nel pyproject.toml\n**poetry export -f requirements.txt \u0026gt; requirements.txt**\nEsporta il contenuto del file .lock del tuo progetto in requirements.txt. È utile quando si passa il lavoro a sviluppatori che usano ancora requirements.txt per qualche motivo.\nÈ anche possibile eseguire il seguente comando: poetry export -f requirements.txt --output reqtest.txt --without-hashes che consente di esportare le dipendenze in un file con un nome diverso (reqtest.txt) e senza gli hash che codificano i pacchetti. Questo comando può essere utile se con il comando normale ci sono dei problemi nell\u0026rsquo;installazione dei requirements.txt\n**poetry env list --full-path**\nVisualizzare il percorso e l\u0026rsquo;elenco dell\u0026rsquo;ambiente.\nConfigurazioni **poetry config**\n\u0026ldquo;Config\u0026rdquo; si riferisce alla configurazione a livello di ambiente, come i percorsi dell\u0026rsquo;ambiente virtuale corrente o le variabili di ambiente. Passando l\u0026rsquo;opzione \u0026ndash;list restituirà gli attuali valori di configurazione del tuo ambiente.\n**poetry check**\nConsente di controllare il file pyproject.toml per eventuali errori\n**poetry show**\nRestituisce una ripartizione di tutti i pacchetti attualmente installati nel progetto, comprese le dipendenze delle dipendenze.\nEsecuzione dell\u0026rsquo;applicazione **poetry run [script-name]**\nEsegue lo script definito all\u0026rsquo;interno della sezione: [tool.poetry.scripts] del pyproject.toml\nBuildare e pubblicare il pacchetto (progetto) **poetry build**\nConsente di creare una build del codice sorgente e dell\u0026rsquo;archivio wheels\n**poetry publish**\nPubblica l\u0026rsquo;output della build all\u0026rsquo;interno di una repository esterna (come ad esempio Pypi)\nPoetry Getting Started Vediamo adesso come fare per inizializzare poetry all\u0026rsquo;interno di un nuovo progetto\n##Inizializziamo poetry all\u0026#39;interno di una cartella poetry init  #Oppure creiamo un nuovo progetto (crea anche una sotto cartella) poetry new \u0026lt;app_name\u0026gt;  ## Ora potete modificare il file: pyproject.toml come volete  #Se volete creare la cartella .venv all\u0026#39;interno del progetto fate: poetry config virtualenvs.in-project true  #Ora occore compilare poetry per creare il venv #E lanciare la shell con il venv che avete definito poetry shell  #Se necessario aggiornare pip python -m pip install --upgrade pip # Questo può essere necessario se compaiono degli errori nell\u0026#39;installazione delle dipendenze  #Aggiungere una dipendenza e installarla poetry add pandas  #Aggiungere una dipendenza di sviluppo e installarla poetry add -D flake8  #Se avete definito le librerie all\u0026#39;interno del pyproject.toml #È possibile installarle lanciando questo comando poetry install  #Per lanciare un file definito nel pyproject.toml poetry run \u0026lt;script\u0026gt;  #Visualizzare il path del virtual env all\u0026#39;interno del progetto (o fuori) #Con anche la lista delle librerie installate poetry show -v  # È sempre possibile visualizzare la versione di default di python in uso correntemente which python  #Per uscire dalla shell di poetry e dall\u0026#39;ambiente creato exit  #Rimuovere un ambiente virtuale (venv) utilizzanto poetry poetry env remove \u0026lt;python\u0026gt; Aggiungere poetry ad un progetto esistente (con dei requirements.txt)  #inizializzare poetry all\u0026#39;interno di una directory poetry init  #compilare le informazioni all\u0026#39;interno del pyproject.toml  #Se si vuole utilizzare un virtual env all\u0026#39;interno del progetto fare: poetry config virtualenvs.in-project true  ## Importare i requirements.txt (librerie) all\u0026#39;interno di poetry poetry add $( cat requirements.txt ) # Non è \u0026#34;bellissimo\u0026#34; e potrebbe non funzionare Generare da poetry un file: requirements.txt\npoetry export -f requirements.txt \u0026gt; requirements.txt  #Un esempio più completo poetry export -f requirements.txt --output reqtest.txt --without-hashes #crea un file: reqtest.txt differente #senza gli hash (ovvero senza la firma delle librerie)  #è meno safe perchè con gli hash pip potrebbe avere problemi nell\u0026#39;installazione Attenzione può accadere in alcune situazioni di dover aggiornare pip per installare alcune librerie, per farlo una volta creato e attivato il vostro virtualenvironment con python fare:\n#Aggiornare pip python -m pip install --upgrade pip Questo problema può verificarsi appena lanciate un\u0026rsquo;installazione di una libreria oppure fate poetry install o poetry update.\nATTENZIONE: non chiamate nessun file o modulo, oppure il vostro progetto come un nome di una libreria che installerete utilizzando poetry.\nOltre ad essere un cattiva pratica in un progetto manderà in confusione poetry dandovi un AssertionError.\nhttps://github.com/python-poetry/poetry/issues/236\nSe vi trovaste nella situazione di aver creato un modulo, una cartella o un file con lo stesso nome di una libreria il consiglio è quello di rinominare il file o cartella incriminata, eliminare il vostro virtualenvironment e lanciare nuovamente: poetry install per installare una versione pulita del virtualenv.\nPoetry in VSCode Poetry non è ancora integrato all\u0026rsquo;interno di vscode e nell\u0026rsquo;estensione ufficiale di Python, quindi per utilizzarlo con vscode è necessario configurarlo manualmente.\nPer consentire al progetto di utilizzare l\u0026rsquo;ambiente virtuale del progetto è necessario definire un file inserendo il path di riferimento dell\u0026rsquo;ambiente virtuale creato con poetry\n lanciare nel terminale: **poetry env list --full-path** e copiare il path che si riferisce all\u0026rsquo;ambiente virtuale (venv) di poetry All\u0026rsquo;interno del progetto creare una nuova cartella chiamata: .vscode All\u0026rsquo;interno della cartella creare un file chiamato: settings.json Inserire nel file la seguente configurazione  {  \u0026#34;python.pythonPath\u0026#34;: \u0026#34;\u0026lt;path dell\u0026#39;ambiente venv copiato\u0026gt;\u0026#34; }  Rilanciare vscode e in automatico quando aprirete un file .py verrà utilizzata la versione di Python che avete creato con Poetry  Ricordarsi sempre di lanciare nel terminale: poetry shell per lanciare l\u0026rsquo;ambiente\nRicordarsi di non pushare sulla vostra repository git remota le configurazioni di vscode appena create per non sovrascrivere quelle dei colleghi (inserite la cartella .vscode nel file gitignore)\nUn altro metodo\nLanciare il progetto da terminale\n#dire a poetry di generare in locale il virtualenv poetry config virtualenvs.in-project true --local poetry config virtualenvs.create true --local poetry config settings.virtualenvs.in-project true  #quindi lanciare poetry install In questo modo generete un cartella chiamata: virtualenv all\u0026rsquo;interno del progetto, in questo modo vscode capirà che questo è il default virtualenv da utilizzare invece di quello globale\nSe si vuole fermare l\u0026rsquo;utilizzo del .venv all\u0026rsquo;interno del progetto è possibile fare:\n#tell poetry not to use venv inside the proj folder poetry config virtualenvs.in-project false --local poetry config virtualenvs.create false --local poetry config settings.virtualenvs.in-project false Installare poetry nella cartella di progetto (*) Un\u0026rsquo;impostazione molto utile per poetry (anche con vscode) è quella di dire a poetry di installare il virtualenv python con le rispettive librerie all\u0026rsquo;interno della cartella di progetto.\nQuesto è molto comodo perchè ad esempio con vscode vi basta inserire l\u0026rsquo;impostazione:\n\u0026#34;python.pythonPath\u0026#34;: \u0026#34;${workspaceFolder}/.venv/bin/python\u0026#34; Per attivare il virtualenv nel vostro progetto in modo automatico.\nAttention: ricordatevi sempre di inserire .venv all\u0026rsquo;interno del file: .gitignore per non pushare sulla vostra repository tutto il virtualenv!!\nPer fare questo, il modo più semplice è fare da terminale: poetry config virtualenvs.in-project true.\nMa se volete attivarlo di default potete aggiungere un file: poetry.toml nella cartella di progetto così formato:\n[virtualenvs] create = true in-project = true In questo modo tutte le volte che si farà: poetry install verrà installato poetry nella cartella di progetto in automatico.\nPer visualizzare tutte le possibili configurazioni installate su una repository è possibile usare il comando:\n# visualize all the configurations poetry config --list Per rimuovere delle configurazioni invece è possibile fare:\n poetry config --unset repo.foo Un esempio di Pyproject.toml Ecco un esempio di file pyproject.toml che potete utilizzare sui vostri progetti (ovviamente con gli opportuni cambiamenti e personalizzazioni)\n[tool.poetry] name = \u0026#34;poetry-tutorial-project\u0026#34; version = \u0026#34;0.1.0\u0026#34; description = \u0026#34;Simple python project built with poetry\u0026#34; authors = [\u0026#34;Andrea Guzzo \u0026lt;andrea.guzzo92@gmail.com\u0026gt;\u0026#34;] maintainers = [\u0026#34;Andrea Guzzo \u0026lt;andrea.guzzo92@gmail.com\u0026gt;\u0026#34;] license = \u0026#34;MIT\u0026#34; readme = \u0026#34;README.md\u0026#34; homepage = \u0026#34;http://localhost:5000\u0026#34; repository = \u0026#34;https://github.com/jeydi/\u0026#34; documentation = \u0026#34;https://github.com/jeydi/\u0026#34; keywords = [ \t\u0026#34;Poetry\u0026#34;, \t\u0026#34;Venv\u0026#34;, \t\u0026#34;Virtual enviroments\u0026#34;, \t\u0026#34;Packages\u0026#34;, \t\u0026#34;Packaging\u0026#34; ]  [tool.poetry.dependencies] python = \u0026#34;^3.7\u0026#34; loguru = \u0026#34;*\u0026#34; psutil = \u0026#34;*\u0026#34; pandas = \u0026#34;*\u0026#34; numpy = \u0026#34;*\u0026#34; fastapi = \u0026#34;*\u0026#34; typer = \u0026#34;^0.3.2\u0026#34;  [tool.poetry.dev-dependencies] pytest = \u0026#34;^5.2\u0026#34;  [build-system] requires = [\u0026#34;poetry-core\u0026gt;=1.0.0\u0026#34;] build-backend = \u0026#34;poetry.core.masonry.api\u0026#34;  [tool.poetry.scripts] run = \u0026#34;wsgi:main\u0026#34;  [tool.poetry.urls] issues = \u0026#34;https://github.com/jeydi/\u0026#34; Aggiornare poetry Aggiornare poetry all\u0026rsquo;ultima versione stabile è semplice\n#Aggiornare poetry all\u0026#39;ultima versione stabile poetry self update  #Lanciare questo comando se invece volete installare la preview di poetry poetry self update --preview Cancella poetry Per cancellare e rimuovere poetry è possibile eseguire questi comandi\n#Uninstall poetry python get-poetry.py --uninstall  # Another method (optional) # Setting the POETRY_UNINSTALL env variable befor executing the installer POETRY_UNINSTALL=1 python get-poetry.py Abilitare il completamento per bash o zsh Poetry supporta il completamento automatico da terminale per diverse CLI come: bash, zsh o fish.\nSe volete avere ulteriori dettagli su queste funzionalità potete lanciare: poetry help completions\npoetry completions bash \u0026gt; /etc/bash_completion.d/poetry.bash-completion  # Bash (Homebrew) poetry completions bash \u0026gt; $(brew --prefix)/etc/bash_completion.d/poetry.bash-completion  # Zsh poetry completions zsh \u0026gt; ~/.zfunc/_poetry  # Oh-My-Zsh mkdir $ZSH_CUSTOM/plugins/poetry poetry completions zsh \u0026gt; $ZSH_CUSTOM/plugins/poetry/_poetry Dovrete riavviare la shell per poter vedere le modifiche\nAttenzione (alcuni dettagli):\nFor zsh you must add the following line into ~/.zshrc profile before compinit\nfpath+=~/.zfunc For oh-my-zsh you must then enable poetry in your ~/.zshrc plugin\nplugins(  poetry  ...  ) Creare un python package con Poetry Uno dei vantaggi più grandi nell\u0026rsquo;uso di Poetry è la possibilità di creare dei python package in maniera molto facile e veloce.\nUtilizzare strumenti con poetry Con poetry inoltre è possibile utilizzare alcuni strumenti utili per linting, controllo e test del codice come:\n black flake8 mypy  Integrazione con pytest Poetry inoltre supporta l\u0026rsquo;integrazione con pytest e permette di definire degli argomenti per i test che possono tornare utili soprattutto nel caso di applicazioni molto grandi e corpose che richiedono una maggiore copertura dei casi di test.\nEsempio di un pyproject.toml completo Vediamo un esempio di un file pyproject.toml completo con tutte le funzionalità illustrate precedentemente.\nCome funziona un poetry.toml All\u0026rsquo;interno di un poetry.toml troverete la definizione di tutti i vostri pacchetti e librerie installate all\u0026rsquo;interno del progetto.\nQuesto file è molto utile\nDeploy Come utilizzare poetry con Docker in fase di deploy?\nEcco alcuni link interessanti\n https://medium.com/@harpalsahota/dockerizing-python-poetry-applications-1aa3acb76287 docker caching: https://pythonspeed.com/articles/poetry-vs-docker-caching/ Production Ready Docker packaging for python developers: https://pythonspeed.com/docker/#articles-the-basics-of-docker-packaging  A tal proposito condividiamo qui un Dockerfile di esempio in modo da poter utilizzare questo come base per il deploy (anche per immagini in produzione)\nDockerfile\nFROM python:3.8  # Metadata LABEL name=\u0026#34;PBG Poetry Example\u0026#34; LABEL maintainer=\u0026#34;PBG\u0026#34; LABEL version=\u0026#34;0.1\u0026#34;  ARG YOUR_ENV=\u0026#34;virtualenv\u0026#34;  ENV YOUR_ENV=${YOUR_ENV} \\  PYTHONFAULTHANDLER=1 \\  PYTHONUNBUFFERED=1 \\  PYTHONHASHSEED=random \\  PIP_NO_CACHE_DIR=off \\  PIP_DISABLE_PIP_VERSION_CHECK=on \\  PIP_DEFAULT_TIMEOUT=100 \\  POETRY_VERSION=1.1.13 \\  LC_ALL=C.UTF-8 \\  LANG=C.UTF-8  # System deps: RUN DEBIAN_FRONTEND=noninteractive apt update \u0026amp;\u0026amp; apt install -y libpq-dev gcc  # Install poetry RUN pip install \u0026#34;poetry==$POETRY_VERSION\u0026#34;  # Copy only requirements to cache them in docker layer WORKDIR /app  #Copy all the project files COPY . . # Install libraries  RUN poetry config virtualenvs.create false \\  \u0026amp;\u0026amp; poetry install $(test \u0026#34;$YOUR_ENV\u0026#34; = production) --no-dev --no-interaction --no-ansi  # Set the launching script exec RUN chmod +x launch.sh  # Launch the script for cron CMD [\u0026#34;bash\u0026#34;, \u0026#34;launch.sh\u0026#34;]  # Launch main python script # CMD [\u0026#34;gunicorn\u0026#34;, \u0026#34;-w\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;-b\u0026#34;, \u0026#34;0.0.0.0:8000\u0026#34;, \u0026#34;core.app:app\u0026#34;] Standardizzare le impostazioni Su Poetry è possibile standardizzare le impostazioni di poetry per un determinto progetto all\u0026rsquo;interno di un file, evitando che lo sviluppatore o una pipeline di rilascio debba lanciare manualmente dei comandi per configurare poetry.\nPer fare questo è possibile creare un file chiamato: poetry.toml all\u0026rsquo;interno del progetto.\nUn esempio di file può essere questo:\n[virtualenvs] in-project = true create = true Queste impostazioni consentono di creare un .venv all\u0026rsquo;interno del progetto senza lanciare manualmente il comando di creazione del venv all\u0026rsquo;interno del progetto da terminale.\nCon questo file è possibile fare overriding di tutte le impostazioni di poetry.\nPer vedere l\u0026rsquo;elenco delle impostazioni che è possibile inserire, fare riferimento a questa documentazione:\n https://python-poetry.org/docs/configuration/  Documentazione e link utili Documentazione ufficiale (fatta molto bene) : https://python-poetry.org/docs/basic-usage/\nhttps://hackersandslackers.com/python-poetry-package-manager/\nhttps://www.youtube.com/watch?v=QX_Nhu1zhlg\u0026amp;ab_channel=PyGotham2019\nBuild CLI Utilities with Poetry and Typer: https://www.pluralsight.com/tech-blog/python-cli-utilities-with-poetry-and-typer/\nConfronto con altre librerie: https://towardsdatascience.com/devops-for-data-science-making-your-python-project-reproducible-f55646e110fa\nUse Poetry in Production (with Docker): https://stackoverflow.com/questions/53835198/integrating-python-poetry-with-docker\nData Science PRO with Poetry + Jupyter + VSCode: https://medium.com/analytics-vidhya/setting-up-data-science-python-projects-with-vscode-poetry-jupyter-b96efeea24c8\nPoetry Configure Workspace:\nhttps://zhauniarovich.com/post/2020/2020-02-configuring-python-workspace-p2/\nTo solve problems with psycopg2 and Python\nhttps://blog.vince.id/installing-psycopg2-on-macos\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/struttura-di-progetto/costruire-un-progetto/",
	"title": "Costruire un progetto",
	"tags": [],
	"description": "",
	"content": "Come costruire un progetto con questi nuovi strumenti? Vediamo assieme tutti i passi necessari per costruire un progetto con Python utilizzando gli strumenti visti in questa guida.\nQuesta guida ha come obiettivo quello di accompagnare persone che si approcciano per la prima volta a queste nuovo modo di realizzare progetti con python a realizzare una prima versione del progetto up and running.\nInoltre ha come obiettivo quello di portare facilmente altre persone del team ad utilizzare questi strumenti in modo da familiarizzare il più velocemente possibile, costituendo una valida reference per il progetto.\nQual ora ci fossero dei problemi, refusi o errori in questa guida non esitate a contattarci aprendo delle issue su gitlab o scrivendoci direttamente.\nInstallare i requisiti La prima cosa da fare è installare tutti gli strumenti necessari.\nOvviamente diamo per scontato che tutti voi abbiate una macchina Linux, Windows, MacOS con sopra installata una versione di Python, possibilmente uguale (o meglio superiore) a Python 3.6.X\nInstallare Pyenv Sebbene non indispensabile, ma estremamente consigliato, la prima cosa da fare è certamente installare pyenv in modo da rendere facile l\u0026rsquo;utilizzo e l\u0026rsquo;installazione di una particolare versione di python per un progetto.\nInstallare Poetry Configurazione iniziale di Poetry nel progetto Installare le librerie Librerie di Development Le librerie di development sono tutte quelle librerie necessarie a sviluppare il codice sorgente, come ad esempio: linter, debugger, normalizzazione del codice, controllo di sintassi, \u0026hellip;\npoetry add -D flake8 flake8-isort flake8-builtins autopep8 pylint bandit black\nLibrerie di esplorazione dei dati\nÈ consigliato installare librerie di esplorazione dei dati (come ad esempio Jupyter) in modalità development se Jupyter non è un requisito fondamentale per utilizzare il progetto in produzione\npoetry add -D jupyter jupyterlab\nConfigurazione di Flake8 "
},
{
	"uri": "https://pythonbiellagroup.it/it/visual-studio-code/usare-il-debbuger/",
	"title": "Usare il debugger",
	"tags": [],
	"description": "",
	"content": "Per usare il debugger su vscode e quindi lanciare diversi file è possibile creare per ogni progetto una particolare configurazione di impostazioni che verranno utilizzate dal debugger.\nInoltre VSCode quando andate sulla sezione di debug mette a disposizione uno strumento che consente di generare una particolare configurazione in base al framework o funzionalità che state cercando di usare tramite un template\nCon questa procedura verrà costruito un file: launch.json all\u0026rsquo;interno della directory di progetto: .vscode che potrebbe essere nascosta.\nUn esempio di configurazione (con flask e con un file singolo)\n{  // Use IntelliSense to learn about possible attributes.  // Hover to view descriptions of existing attributes.  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387  \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;,  \u0026#34;configurations\u0026#34;: [  {  \u0026#34;name\u0026#34;: \u0026#34;Python: Current File\u0026#34;,  \u0026#34;type\u0026#34;: \u0026#34;python\u0026#34;,  \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;,  \u0026#34;program\u0026#34;: \u0026#34;${file}\u0026#34;,  \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;  },  {  \u0026#34;name\u0026#34;: \u0026#34;Flask Backend\u0026#34;,  \u0026#34;type\u0026#34;: \u0026#34;python\u0026#34;,  \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;,  \u0026#34;port\u0026#34;: 8000,  \u0026#34;host\u0026#34;: \u0026#34;localhost\u0026#34;,  \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}/server.py\u0026#34;,  \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;,  \u0026#34;env\u0026#34;: {  \u0026#34;API_ENDPOINT_PORT\u0026#34;: \u0026#34;8000\u0026#34;,  \u0026#34;VERBOSITY\u0026#34;: \u0026#34;debug\u0026#34;,  \u0026#34;PLANT\u0026#34;: \u0026#34;demo\u0026#34;  }  }  ] } "
},
{
	"uri": "https://pythonbiellagroup.it/it/gestire-dipendenze/pipx/",
	"title": "Pipx",
	"tags": [],
	"description": "",
	"content": "È vero che ogni progetto dovrebbe sempre avere le proprie dipendenze e vivere in maniera atomica e indipendente rispetto agli altri progetti.\nTuttavia ci sono alcune librerie che possono essere globali su tutta la macchina e su tutto il sistema.\nAlcune di queste librerie sono quelle che servono per gestire la qualità del codice o lo stile, come ad esempio black o flake8\nEcco quindi che viene in soccorso pipx che consente di installare queste librerie globali e usarle globalmente su tutta la macchina.\nhttps://github.com/pipxproject/pipx\nSostanzialmente quando volete installare delle librerie su tutta la macchina globalmente, invece di fare pip install my_package fate pipx install my_package\n#Lista di tutti i pacchetti pipx list  # rimuovere un pacchetto pipx uninstall my_package  # Lanciare una liberia o un comando pipx run black my_file  # Si può anche specificare una determinata versione del pacchetto pipx run --spec black==18.3a1 black --version Ogni volta che viene lanciato pipx run my_package quello che succede è che viene creato temporaneamente un virtualenvironment dentro al quale viene eseguito il comando per poi essere distrutto.\nSu visual studio è importante fare questo settaggio se si vuole usare pipx (lo si fa una volta sola)\n# Installare il pacchetto pipx install flake8  # visualizzare dove viene installato il pacchetto which flake8 \u0026lt;path\u0026gt;  # Copiare il path e dire a visual studio quale binario prendere # Dentro al file settings.json (vedere come si fa a prendere) inserire \u0026#34;python.linting.flake8Path\u0026#34;: \u0026#34;/Users/YOUR_USERNAME/.local/bin/flake8\u0026#34; "
},
{
	"uri": "https://pythonbiellagroup.it/it/visual-studio-code/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": "Una feature nascosta all\u0026rsquo;interno di VSCode una volta installata l\u0026rsquo;estensione di Python è la possibilità di eseguire test tramite interfaccia con Python.\nPer usufruire di questa funzionalità: Aprire la Command Palette e fare: Python: Configure Tests e dall\u0026rsquo;elenco dei framework di test che vi compariranno selezionare il vostro framework preferito (ad esempio pytest).\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/gestire-dipendenze/anaconda/",
	"title": "Anaconda",
	"tags": [],
	"description": "",
	"content": "Anaconda è uno dei più famosi package manager in ambito Data Science e consente di facilitare la gestione e l\u0026rsquo;organizzazione delle librerie all\u0026rsquo;interno di un progetto.\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/dipendenze/",
	"title": "dipendenze",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/venv/",
	"title": "venv",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/versions/",
	"title": "versions",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/pyenv/",
	"title": "pyenv",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/code/",
	"title": "code",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/docs/",
	"title": "docs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/documentazione/",
	"title": "documentazione",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/estensioni/",
	"title": "estensioni",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/extra/",
	"title": "extra",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/ide/",
	"title": "ide",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/ipython/",
	"title": "ipython",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/mkdocs/",
	"title": "mkdocs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/",
	"title": "Python Biella Group",
	"tags": [],
	"description": "",
	"content": "Benvenuto/a 👨‍💻 PythonBiellaGroup è una community legata a Python che si pone l\u0026rsquo;obiettivo di studiare e apprendere l\u0026rsquo;omonimo linguaggio di programmazione in tutte le sue accezioni\nQuesto sito ha l\u0026rsquo;obiettivo di raccogliere la conoscenza e tutto quello che viene raccolto dalla community rispetto a librerie, metodi, tecnologie e buone pratiche.\nPer qualsiasi informazione su questo progetto o su qualsiasi segnalazione, puoi fare riferimento alla nostra GitHub page. Puoi usare questa issue page per segnalare nuove idee, features, modifiche, aggiunte oppure problemi o bug nel sito.\nPuoi trovare tutti i nostri contatti, materiale e informazioni su questo link In particolare puoi trovare informazioni su:\n Canale telegram che usiamo per comunicare e discutere all\u0026rsquo;interno della community Canale youtube con tutti i video e le registrazioni delle serate Github: con tutto il nostro codice e materiale open source Tutti i nostri canali e contatti social   🚀 Progetti e Repository Tutto il materiale utilizzato durante le serate\nDocumentazione sullo sviluppo moderno con Python\nEsercizi fatti dalla community, proponi la tua soluzione!\n🤲 Vuoi aiutarci? Ti interessa il nostro progetto? Contribuisci alla community!\nProponi un tuo intervento su quello che ti piace\nAiutarci con il nostro blog, social, community e repository\nContattaci su Telegram!\nMa soprattutto: Grazie di essere qui\n"
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/repl/",
	"title": "REPL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/settings/",
	"title": "settings",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/style/",
	"title": "style",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/tags/vscode/",
	"title": "vscode",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/struttura-di-progetto/makefile/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/it/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
}]