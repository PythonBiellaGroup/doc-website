[
{
	"uri": "https://pythonbiellagroup.it/en/gestire-versioni-di-python/",
	"title": "Manage Python&#39;s versions",
	"tags": ["versions", "pyenv"],
	"description": "",
	"content": "Section 1 Manage versions of Python "
},
{
	"uri": "https://pythonbiellagroup.it/en/gestire-dipendenze/",
	"title": "Manage Dependecies",
	"tags": ["versions", "venv", "dipendenze"],
	"description": "",
	"content": "Section 2 Manage Dependencies In order to correctly manage dependecies from python 3.3 there exist a module named venv which is able to create a virtual environemnt inside your project.\nThis is actually old school, still many people is using that nowadays.\npython -m venv my-virtualenv The command inits a directory my-virtualenv whose files are:\n python binary pip/easy_install/wheel binary activation script binary files utilizzate da Python  Then you are required to activate the virtual envirnoment:\n# On Linux and Mac source ./my-virtualenv/bin/activate  # On Windows my-virtualenv\\Scripts\\activate.bat  # Deactivate virtualenv deactivate Virtual ENVinonments are software abstractions that make your analysis portable and reproducible. As a matter of fact with venvs you are able to produce requirements.txt files which contains the steps to install dependencies on your machine.\nThis is for sure one of the easiest way to deal with dependencies, but there are some alternatives that allows you to have more control and supervise you while you are setting up your project.\npyenv-virtualenv Pyenv is a nice tool to build even more easily virtual environments though its plugin pyenv-virtualenv.\n# create a virtualenv pyenv virtualenv 3.7.4 my-project  # list all venvs pyenv virtualenvs  # activate virtualenv pyenv activate my-project  # deactivate virtualenv pyenv deactivate Beside virtualenv and pyenv-virtualenv there are also other interesting dependecy management tools, these are:\n conda (conda package manager) invasive AF virtualfish virtualenvwrapper pipenv: super common in many tutorials, still the last contribution dated back to 2018 with more than 300k opened issues. pipenv is highly opnionated, take a look at https://github.com/pypa/pipenv/issues/4058) pipx: central dependency dispatchement  "
},
{
	"uri": "https://pythonbiellagroup.it/en/struttura-di-progetto/",
	"title": "Project Structure",
	"tags": ["versions", "venv", "dipendenze"],
	"description": "",
	"content": "Section 3 Project Structure How should a Python project be organized?\nThis is certainly a fairly common question, but it is also extremely difficult to answer because there is no proper answer.\nPython does not require the adoption of a certain structure, but there are some best practices to bear in mind and considerations you may (and frequently should) make.\nIn Python, a Module is a container that houses all of the functions or classes that you need to import elsewhere in order to reuse what you\u0026rsquo;ve written.\nWhen dealing with modules and other libraries or code, the most important thing to remember is to keep two mistakes in mind inside a project.\n ModuleNotFoundError : That is, when the file (module) you want to import does not exist or is not accessible. ImportError when there are bug knows as circular imports  When you import a module in Python, Python will seek for dependencies (the modules you wish to import) in three places:\n Installation and dependencies: this refers to all of the default directories associated with the installed pip packages. Additional pathways defined in the environment variable: PYTHONPATH In the directory containing the scripts needed to launch the interpreter. In other words, if you execute python ~/ module/scripts/server.py, Python will search for modules to import within ~/ module/scripts/. If you use the python or ipython command to start an interactive session with Python, the directory where you were at the time the command was started will be utilized.   import sys print(sys.path) Whether you receive a ModuleNotFoundError, try executing the command above to see if it contains the folders you wish to use and which should be present.\nIn such instance, try doing imports on the PYTHONPATH to include your folders, or try sys.path.append (\u0026quot;/module/scripts\u0026quot;) (it\u0026rsquo;s a bit of a trick, but it could help to fix the problem).\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/code-style/",
	"title": "Code Styles",
	"tags": ["versions", "code", "style"],
	"description": "",
	"content": "Section 4 Code Style When you are collaborating on a code project with teammates It is highly recommended to agree on a same code style. That would directly help to quickly grasp others code and still being on the trail when code is left behign for a while.\nIn Python we have two styles:\n PEP8 = Default python style guide PEP257 = Docstring style guide  Some coding rules according to PEP8\n indentation is made with 4 consecutive space characters there are specific requirements for paarenthesis indentation each line of code should not be longer than 79 characters \u0026amp; 72 characters for code documentation import statements should be specified with a precise structure (isort) and many other more  Take a look at PEP8 guidelines https://pep8.org, https://www.python.org/dev/peps/\nHowever PEP8 guidelines are not bible and many things are questionable. The span of flexibility sometimes might create some confusion, so be aware that rules are up there but do not expect to follow them religiously.\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/documentare-il-codice/",
	"title": "Document code",
	"tags": ["documentazione", "mkdocs", "docs"],
	"description": "",
	"content": "Section 4 how to document code There are many and different ways to document code. The basic idea behind code documentation is to communicate to others what you are doing in the easiest and immediate way as possibile. The most of the time however you are going to communicate directly to\u0026hellip; you 😇! So do yourself a favor, be nice to yourself by documenting your code.\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/visual-studio-code/",
	"title": "Visual Studio Code",
	"tags": ["vscode", "ide", "settings", "estensioni"],
	"description": "",
	"content": "Visual Studio Code A code editor is an essential tool for every programmer and the tool with which we spend the majority of our time.\nThe choice of an editor with which to write code is frequently a sensitive matter that sparks heated debate among programmers.\nAs you are aware, there are other editors available, and you are free to use whatever you like, but after several years of using Sublime Text and Pycharm, I highly advise you to use Visual Studio Code. (I don\u0026rsquo;t want to open the EMACS or Vim brackets since it would mean the end\u0026hellip;\nWhy Visual Studio Code? In recent years, Visual Studio Code has become the most popular and undoubtedly the most well-known editor for creating code.\n2019 Stack Overflow poll (in 2020 it was not done)\nSo, let\u0026rsquo;s look at some of the benefits of utilizing vscode together.\n It is open source. It is compatible with any operating system (even via the web as a server) You are free to use whatever language you choose. It\u0026rsquo;s straightforward, yet quite effective. It\u0026rsquo;s quick. It is highly configurable owing to a plethora of addons. It is employed in a variety of professional settings. It\u0026rsquo;s extensively utilized and well-documented. Remote development is possible. Even at a distance, live coding and pairwise coding are feasible. You can synchronize your extensions and settings between devices.  These are some of my concerns; clearly, I have no benchmark against other editors to compare it to, but I still urge you to use and experiment with it.\nHowever, there is one thing that I miss a lot during development when compared to Pycharm, and that is the ability to restructure the code in a really sensible way, as it does with Pycharm. Unfortunately, the refactoring process on vscode is still frequently tied to manual tasks, and not all of the essential automatisms are present.\nThe thing I appreciate best about VSCode is the proper blend of productivity and ease of use, especially for those who are just beginning out with coding.\nSuggested extensions to be installed and their ids for VScode store\n bookmarks: (alefragnani.bookmarks) code spell checkers (streetsidesoftware.code-spell-checker) docker (ms-azuretools.vscode-docker) docs-markdown (docsmsft.docs-markdown) docs-preview (docsmsft.docs-preview) docs-yaml (docsmsft.docs-yaml) git graph (mhutchie.git-graph) git history (donjayamanne.githistory) git lens (eamodio.gitlens) indent-rainbow (oderwat.indent-rainbow) italian-code spell checker (streetsidesoftware.code-spell-checker-italian) jupyter (ms-toolsai.jupyter) jupyter keymap (ms-toolsai.jupyter-keymap) live-share (ms-vsliveshare.vsliveshare) markdown all in one (yzhang.markdown-all-in-one) material icon theme (pkief.material-icon-theme) postgreSQL (ms-ossdata.vscode-postgresql) pylance (ms-python.vscode-pylance) python (ms-python.python) python docstring generator (njpwerner.autodocstring) python indent (kevinrose.vsc-python-indent) rainbow brackets (2gua.rainbow-brackets) rainbow csv (mechatroner.rainbow-csv) remote development (bundle) (ms-vscode-remote.vscode-remote-extensionpack) render line endings (medo64.render-crlf) sqltools (mtxr.sqltools) swagger viewer (arjun.swagger-viewer) todo highlight (wayou.vscode-todo-highlight) todo tree (gruntfuggly.todo-tree) visual studio intellicode (visualstudioexptteam.vscodeintellicode) webhint (webhint.vscode-webhint) yaml (redhat.vscode-yaml)  On VScode we also highlight other useful configurations that are going to be covered in the following sections like:\n automated file saving - use flake8 as a linter black as a tool for automatically formatting the code at save Bandit for security checks. development containers Migration of the debugger virtual environment configuration Remote development  "
},
{
	"uri": "https://pythonbiellagroup.it/en/repl/",
	"title": "REPL",
	"tags": ["REPL", "ipython"],
	"description": "",
	"content": "Sezione 6 REPL REPL stands for: READ - EVAL - PRINT - LOOP.\nIt refers to all of the tools that allow you to open a terminal version of Python and run code in real time, as well as see the results in real time.\nThe Python REPL, which is installed by default together with the Python version, is useful, but it is sometimes too rudimentary and inconvenient to use for more complex tasks.\nThere are other alternatives, the most common and popular of which being iPython, which is the same REPL that runs behind Jupyter Notebooks and allows you to use notebook-style writing.\nIt is possible to install and use iPython.\npip install ipython # better with pipx pipx install ipython It is encouraged to utilize pipx since it is one of those tools that you should use all the time because it is mostly used to check out some functions or run some tests on the code before writing it.\niPython Benefits  Tab Autocompletion syntax highlighting automatic Indentation Magic commands many many other more  "
},
{
	"uri": "https://pythonbiellagroup.it/en/code-style/black/",
	"title": "Black",
	"tags": [],
	"description": "",
	"content": "https://black.now.sh/\nBlack is a code formatter which takes files and formats them acccording to PEP8 and PEP257 with some additional rules (i.e. single quote with double quote).\nIt allows also for custom configuration (--skip-string-normalization to preserve single quote) which is good since as we already stated code conventions are really not mandatory rules but guidelines.\nBlack is very opinionated and sometimes really criticized, but if you and your team mates take advatage of it is quickly coerce code to a single consistent style.\nInstallation and Usage # black installation  pip install black  # better use with pipx pipx install black Formattina a project\nblack my_project # my_project = workig dir folder Furthermore you can set black directly on VScode when saving files. This hopefully might save some time.\nTo do that it is necessary to go into VScode settings and change format on save, to python: formatting provider\nA couple of walkthrough to get a grip on that:\nhttps://marcobelo.medium.com/setting-up-python-black-on-visual-studio-code-5318eba4cd00\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/visual-studio-code/installare-un-linter/",
	"title": "linter installation",
	"tags": [],
	"description": "",
	"content": "As previously said, linter are your best friends for ensuring that everything is in order when writing the code.\nTo select a linter, go to the command line (press F1 or \u0026lsquo;ùCTRL + SHIFT + P or go to View \u0026gt; Command Palette) and type: \u0026gt; python: Select Linter . Select the linter that you want (we recommend flake 8).\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/struttura-di-progetto/import-relativi/",
	"title": "Relative Imports",
	"tags": [],
	"description": "",
	"content": "There exist mainly a couple of ways to import Python modules\n Absolutes Import : from module/models/user import get_user Relative Import : from ..models/user import get_user  Both methods have pros and cons; nevertheless, I prefer Absolute Import since it is easier to understand and apply (making the code much cleaner and compliant).\nAlso, if you utilize relative imports, you may see the following error:\nValue Error: attempted relative import beyond top-level package\nThis occurs when attempting to import something from a folder other than the project\u0026rsquo;s (From a parent folder outside the root.\nThere are numerous solutions to this problem, but the suggestion remains consistent: utilize absolute imports as much as feasible.\n⚠ Attention ⚠ NEVER USE THE * TO IMPORT FUNCTIONS OR MODULES.\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/materiale-utile/",
	"title": "Useful Materials",
	"tags": ["extra"],
	"description": "",
	"content": "Extra Section Useful Materials Pycon 2020: https://www.youtube.com/watch?v=ndi55Ig6-SI\u0026amp;list=PL7zLksDxo500pt5884WWGV6xxb5WqVR91\u0026amp;ab_channel=PyConUS\nBest Python 2020: https://www.youtube.com/watch?v=tqUe0gcfqAU\u0026amp;list=PLCA4Z3rehf5nDNRqo4sLC_8KgU0tymlge\u0026amp;ab_channel=PyConUS\nModern Python Developer\u0026rsquo;s toolkit: https://www.youtube.com/watch?v=WkUBx3g2QfQ\u0026amp;ab_channel=PyConUS\nModern Python Developer\u0026rsquo;s toolkit (resources): https://pycon.switowski.com/\nInstall, Uninstall and manage multiple versions of python on a mac: https://www.ianmaddaus.com/post/manage-multiple-versions-python-mac/\n5 Python Tricks da usare: https://towardsdatascience.com/5-python-tricks-you-should-start-using-in-2021-1084af21c2f2\nMedium informations and blogs to look at:\n https://betterprogramming.pub/ https://medium.com/analytics-vidhya https://towardsdatascience.com/  Jetbrains Dev Ecosystem 2020: https://www.jetbrains.com/lp/devecosystem-2020/python/\nState of 2020 language: https://fwdays.com/en/event/python-fwdays-conference/review/python-2020-the-state-of-the-language\na more discursive stage\nhttps://towardsdatascience.com/12-steps-to-production-quality-data-science-code-35ae2f868003\n  Code quality\nhttps://realpython.com/python-code-quality/#it-does-not-do-what-it-is-supposed-to-do\n Style guide (Code Style: https://python-docs.readthedocs.io/en/latest/writing/style.html)  PEP (new): https://pep8.org Linter \u0026amp; Tools  Flake 8 Bandit Mypy Black        Modularized code\n What is a module, what is th ebeahviour of a module, what is a main.    Python env\n Virtual environment  Pyenv      Project \u0026amp; Library management\n Poetry (and requirements.txt) with respect to old school approach    IDE settings (Visual Studio Code)\n Extensions How to use VScode for:  Analysis Development      Come documentare al meglio il proprio codice\nhttps://realpython.com/documenting-python-code/\nTutta la documentazione che scrivete all\u0026rsquo;interno del progetto cercate di farla in Markdown (https://guides.github.com/features/mastering-markdown/)\nCode Refactoring (Best Practise)\nhttps://www.altexsoft.com/blog/engineering/code-refactoring-best-practices-when-and-when-not-to-do-it/\nSoftware Quality (Metrics and how to use)\nhttps://www.altexsoft.com/blog/engineering/what-software-quality-really-is-and-the-metrics-you-can-use-to-measure-it/\nTest Driven Data Science Development\nhttps://towardsdatascience.com/tdd-datascience-689c98492fcc\nhttps://www.freecodecamp.org/news/learning-to-test-with-python-997ace2d8abe/\nPyhton tools for automated documentation generation:\n https://lucacorbucci.medium.com/how-to-generate-a-documentation-for-python-code-using-pdoc-60f681d14d6e https://medium.com/blueriders/python-autogenerated-documentation-3-tools-that-will-help-document-your-project-c6d7623814ef https://realpython.com/generating-code-documentation-with-pycco/  Bonus and random thoughts BONUS: To show also on mac how poetry + pyenv works at the end\nWarning: test pyenv + poetry with windows + linux subsystem + linux virtual machine\nWhen a project is born classic (using virtualenv and venv) leave it like this \u0026hellip; migrating to Poetry can be complicated.\nIt is recommended to use python version 3.8 (3.7 already old and 3.9 still too new).\nPoetry with Docker integration\nhttps://stackoverflow.com/questions/53835198/integrating-python-poetry-with-docker\nhttps://pythonspeed.com/articles/pipenv-docker/\nTo be seen fo\u0026rsquo;sure:\nhttps://pythonspeed.com\nPython Logging (Log your code and not use print): https://python-docs.readthedocs.io/en/latest/writing/logging.html\nCommons Gotcha (concetti generali interessanti): https://python-docs.readthedocs.io/en/latest/writing/gotchas.html\nPackaging your code: https://python-docs.readthedocs.io/en/latest/shipping/packaging.html\nFreezing your code: https://python-docs.readthedocs.io/en/latest/shipping/freezing.html\nTwo cool functions to know in python\n tabulate tqdm  https://towardsdatascience.com/two-cool-functions-to-know-in-python-7c36da49f884\nVarious Themes\n put to prod with poetry + docker (integrando code quality processes): https://pythonspeed.com/articles/pipenv-docker/ Speed up your code: https://pythonspeed.com/performance/ Process large dataset without running out of memory: https://pythonspeed.com/memory/ Deploy  Console application (desktop application) → how to build local app (Build + Install) Webpage Mobile app    Structure the project How to set up a project structure from scratch\nhttps://python-docs.readthedocs.io/en/latest/writing/structure.html\nSemantic release https://python-semantic-release.readthedocs.io/en/latest/\nhttps://mestrak.com/blog/semantic-release-with-python-poetry-github-actions-20nn\nPrettier https://www.reddit.com/r/vscode/comments/95lsb8/a_better_python_formatter/\nhttps://stackoverflow.com/questions/65410758/problem-formatting-python-when-using-prettier-in-vscode\nhttps://dev.to/eegli/quick-guide-to-python-formatting-in-vs-code-2040\nhttps://www.digitalocean.com/community/tutorials/code-formatting-with-prettier-in-visual-studio-code\nhttps://stackoverflow.com/questions/57907645/prettier-not-formatting-html-files-in-vs-code\n#Prettier configuration: .prettierrc {  \u0026#34;arrowParens\u0026#34;: \u0026#34;avoid\u0026#34;,  \u0026#34;endOfLine\u0026#34;: \u0026#34;lf\u0026#34;,  \u0026#34;htmlWhitespaceSensitivity\u0026#34;: \u0026#34;css\u0026#34;,  \u0026#34;insertPragma\u0026#34;: false,  \u0026#34;jsxBracketSameLine\u0026#34;: false,  \u0026#34;jsxSingleQuote\u0026#34;: false,  \u0026#34;printWidth\u0026#34;: 80,  \u0026#34;proseWrap\u0026#34;: \u0026#34;always\u0026#34;,  \u0026#34;quoteProps\u0026#34;: \u0026#34;as-needed\u0026#34;,  \u0026#34;requirePragma\u0026#34;: false,  \u0026#34;semi\u0026#34;: false,  \u0026#34;singleQuote\u0026#34;: true,  \u0026#34;tabWidth\u0026#34;: 2,  \u0026#34;useTabs\u0026#34;: false } "
},
{
	"uri": "https://pythonbiellagroup.it/en/gestire-dipendenze/virtualenv/",
	"title": "Virtualenv",
	"tags": [],
	"description": "",
	"content": "Packaging (and Enviroments) Virtualenv\nPipenv vs virtualenv: https://medium.com/@dakota.lillie/an-introduction-to-virtual-environments-in-python-ce16cda92853\nVenv: https://medium.com/@rahul3012_37725/a-very-basic-guide-to-python-virtual-environments-a53d1e191490\n# install virtualenv pip install virtualenv  # prior launching the command below be sure to have conda and exxecute: conda activate development # conda version has to he \u0026gt;= desidered version  # generate a new virtualenv in a specific path virtualenv --python=3.6 \u0026lt;path_nome_env\u0026gt;  #### UNIX (mac and linux) source \u0026lt;path_nome_env\u0026gt;/bin/activate  #### WINDOWS \u0026lt;path_nome_env\u0026gt;\\scripts\\activate  #### Visual Studio Code  #(install Microsoft Python Extension and then click on python in the bottom tab) #Windows navigate to -\u0026gt; \u0026lt;path_nome_env\u0026gt;\\scripts\\\u0026lt;python3.6\u0026gt; #UNIX navigate to -\u0026gt; \u0026lt;path_nome_env\u0026gt;/bin/\u0026lt;python3.6\u0026gt;  #Warning: if you are using another python version, change python3.6 to your current version  #Then install requirements.txt pip install -r requirements.txt Prevent conda to activate default base environment by default conda config --set auto_activate_base false\nhttps://www.youtube.com/watch?v=asL0dbN6pAY\nhttps://www.youtube.com/watch?v=1GIIaGbL9qQ\nInside the cheeseshop: How Python Packaging Works (Dustin Ingram) https://www.youtube.com/watch?v=AQsZsgJ30AE\nPEP 518: introduce il pyproject.toml che rimpiazza quasi tutto.\nPublish package to Pypi (old school)\nhttps://www.youtube.com/watch?v=GIF3LaRqgXo\u0026amp;ab_channel=CodingTech\nUse uf PipEnv\nhttps://hackersandslackers.com/pipenv-python-environment-management/\nDifferenze tra PipEnv, Pip e Conda (DevOps Concepts)\nhttps://towardsdatascience.com/devops-for-data-science-making-your-python-project-reproducible-f55646e110fa\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/gestire-dipendenze/pyenv-virtualenv/",
	"title": "Pyenv-virtualenv",
	"tags": [],
	"description": "",
	"content": "Pyenv, in conjunction with a pyenv-virtualenv module, provides an even more powerful tool for creating virtual environments.\n# Create virtual env pyenv virtualenv 3.7.4 my-project  # List virtual venvs pyenv virtualenvs  # Activate venvs pyenv activate my-project  # deactivate venvs pyenv deactivate Other helpful and interesting utilities than virtualenv and pyenv-virtualenv include:\n conda (which also includes the \u0026lsquo;conda\u0026rsquo; package manager), which is quite intrusive. the virtualfish virtualenvwrapper pipenv: featured in many tutorials, but it is very badly maintained (the current version dates back to 2018 with 300+ outstanding issues) and can create various difficulties in a project (along with several debates associated to the project: https://github.com/pypa/pipenv/issues/4058) pipx: to consolidate and centralize dependencies (sometimes called central dispatchement)  "
},
{
	"uri": "https://pythonbiellagroup.it/en/struttura-di-progetto/import-circolari/",
	"title": "Circular Imports",
	"tags": [],
	"description": "",
	"content": "Circular Imports This is a severe issue in a project, and the error arises when you try to import one module from another, and vice versa (creating a circularity in the imports).\n# file_a.py from file_b import hello_world  def hello():  return \u0026#34;hello\u0026#34;  def first_program():  return hello_world()  first_program() # file_b.py from file_a import hello  def hello_world():   return hello() + \u0026#34; world\u0026#34; When you are lunching python file_a.py you will encounter the following error:\nTraceback (most recent call last):  File \u0026#34;file_a.py\u0026#34;, line 1, in \u0026lt;module\u0026gt;  from file_b import hello_world  File \u0026#34;/my_module/file_b.py\u0026#34;, line 2, in \u0026lt;module\u0026gt;  from file_a import hello  File \u0026#34;/my_module/file_a.py\u0026#34;, line 1, in \u0026lt;module\u0026gt;  from file_b import hello_world ImportError: cannot import name \u0026#39;hello_world\u0026#39; There are numerous solutions to address these circular import difficulties here, but be careful while developing your code to avoid these issues.\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/code-style/flake8/",
	"title": "Flake8",
	"tags": [],
	"description": "",
	"content": "Besides formatting tools there are also linters, whose aim is static code analysis.\nThe most popular on Python is Flake8.\nFlake8 does not change any code, it suggests warnings and caveats in real time\nFlake8 is the result og 3 projects:\n pyflakes https://github.com/pycqa/pyflakes, which warns about both unused modules and declared variables pycodestyle https://pycodestyle.pycqa.org/en/latest/ PEP8 violations McCabe https://github.com/pycqa/mccabe (default is off) warns if functions are really too long or complex  One other advatage of Flake8 is the vast amount of extensions and plugins which can be integrated into your worflow and best practices (we have already seen Bandit). Extensions are really useful when coding mates are prone to use different style guidelines or conventions since the only this needed to be aligned is to download the corresponding extension.\nfull list of extensions: https://github.com/DmytroLitvinov/awesome-flake8-extensions\nSome other recommended extensions:\n flake8-builtins - makes sure you don’t use Python builtins as variables or parameters flake8-bugbear - an additional set of checks (some are opinionated) that will complain when you, for example:  Use except: instead of except Exception: Use ++n Use .strip() on a multiline string Use a length-one tuple   flake8-comprehensions - helps you write better list/set/dictionary comprehensions flake8-docstrings - enforces PEP257 flake8-eradicate - reports commented out code (“dead code”) flake8-isort - check if your import statements are sorted according to the isort recommendations flake8-broken-line - complains you use backslash for line breaks (try using parenthesis or tripple quotes instead) flake8-quotes - if you prefer single quotes over double quotes (or the other way around), this plugin can help you enforce them flake8-rst-docstrings - looks for problems in your documentation (usefull if you are using Sphinx that we will talk about later) darglint - checks if your docstrings are matching functions definitions (for example, if you remembered to describe all the parameters and the return value) flake8-mutable - checks that you don’t use mutable default arguments flake8-bandit - introduce the capabilities of bandit inside flake8  Flake8 installation pip install flake8  # still pipx is preferred for a consistent workflow pipx install flake8  # install extensions pip install flake8-docstrings flake8-isort # still pipx is preferred for a consistent workflow also for extension pipx inject flake8 flake8-docstrings flake8-isort flake8-bandit  # If you run into a path error pipx ensurepath  # .. then reboot terminal Run Flake8\nflake8 my_project #my_project = workdir To make the best use of Flake8 it is highly encouraged the VScode integration by launching Python: Select Linter\nManaging big projects with Flake8 and its plugins and extensions could be a mess sometimes. However it comes to help the helpful library FlakeHell. Flakehell is wrapper around Flake which allows us to specify flake8 configuration directly inside the pyproject.toml (poetry library management file).\n⚠ Attention ⚠. flakehell is no longer maintained (2019), however you can still use it at your risk (compatibility issues).\n FlakeHell: https://github.com/life4/flakehell Example: https://dev.to/bowmanjd/using-flake8-and-pyproject-toml-with-flakehell-1cn1  There are a number of other tools that help supervise code and bugs while you are typing.\n pylint pydocstyle bandit vulture wemake-python-style guide prospector  Still Bandit is the most common and the best partner to Flake8\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/visual-studio-code/utilizzare-una-versione-di-python/",
	"title": "Make us of a Python version",
	"tags": [],
	"description": "",
	"content": "When you open a.py file within a project, you will be prompted to choose a certain version of Python, which you can also see at the bottom right of vscode. It is possible to pick a Python version by pressing on the writing.\nAlways open the Command Palette (by hitting the F1 key or CTRL + SHIFT + P or typing View\u0026gt; Command Palette) and type: \u0026gt; python: Select Interpreter to choose the best Python interpreter for you ( for example your .venv inside the folder).\nYou may also define the location to your interpreter in the project by creating a file called\u0026rsquo;settings.json\u0026rsquo; within the.vscode folder.\n{  \u0026#34;python.pythonPath\u0026#34;: \u0026#34;/Users/jeydi/Progetti/mioprogetto/.venv/bin/python\u0026#34; } "
},
{
	"uri": "https://pythonbiellagroup.it/en/gestire-versioni-di-python/pyenv-avanzato/",
	"title": "Pyenv Advanced",
	"tags": [],
	"description": "",
	"content": "In this advanced section, you\u0026rsquo;ll find tips, best practices, and guides to help you learn everything there is to know about Pyenv.\nUseful documentation https://realpython.com/intro-to-pyenv/\nPyenv with poetry\nhttps://blog.jayway.com/2019/12/28/pyenv-poetry-saviours-in-the-python-chaos/\nInstructions for configuring Pyenv on a Mac.\nhttps://opensource.com/article/20/4/pyenv\nTake note of a Github Gist.\nhttps://gist.github.com/Geoyi/f55ed54d24cc9ff1c14bd95fac21c042\nPyenv is a Python installation manager. Allow and execute other Python installations on the same machine.\nPyenv manages the many Python versions for you, avoiding the chaos of dependencies, versions, and installations seen in the first image.\nWhy don\u0026rsquo;t you use Python, which is installed by default on your operating system?\n Because they might cause problems in projects, each has their own version, and there may be migration and reproducibility issues when they are used in production.  What does pyenv allow us to do? (operational flow)\n Do not use Python in your own user space. Install multiple Python versions. Specify which Python version will be used for a project. Easily switch between different versions of the software.  Pyenv installation To install Pyenv, please refer to the official documentation on Github. This is due to the fact that installation methods might change accordingly to your operating system and between its versions.\nMore advanced Pyenv usage may be found forward in this guide.\nYou may get the installation reference guide at: here.\nPyenv installation verification\nOnce installed and properly configured on your terminal, perform the following:\npyenv --version Install Python Visualize python versions (here gets the 3.* ones only)\npyenv install --list | grep \u0026#34; 3\\.[678]\u0026#34; pyenv install -v 3.7.2 Visualize where Python versions are installed\nls ~/.pyenv/versions/ Disinstall a version of Pyhton\npyenv uninstall \u0026lt;version\u0026gt; Every time a new version of Python with pyenv is installed on Windows (or other operating systems), it is vital to rehash.\n# rehash to update shims pyenv rehash Disinstall vesrion of Python\n# See all Python installation # visualizzare le versioni di pyenv installate  pyenv versions  #disinstallare una determinata versione pyenv uninstall \u0026lt;versione\u0026gt; Use a specific version of Pyenv # Visualize the installed (available) versions pyenv versions  # Visualize the active version of python with pyenv pyenv which python  # Set a global Python version with pyenv pyenv global \u0026lt;version\u0026gt;  # If you want to come back to the system default pyenv global system You can also specify a local python pyenv version for each project within the project folder by performing the following:\npyenv local \u0026lt;version\u0026gt; Or set the version of a particular Python shell\npyenv shell \u0026lt;version\u0026gt; ⚠ Attention ⚠ IN WINDOWS 10 After installing the Python global version of pyenv, remove any references to the basic Python that were previously installed from the environment variable PATH.\nUsing pyenv to create virtualenvs Pyenv offers a wonderful plugin called pyenv-virtualenv that allows you to easily manage the numerous virtualenvs.\nA virtualenv can be managed in a variety of ways (pyenv allows you to manage all 3 in a very simple and convenient way)\n pyenv manages multiple versions of Python itself. virtualenv/venv manages virtual environments for a specific Python version. pyenv-virtualenv manages virtual environments for across varying versions of Python.  create a virtualenv\npyenv virtualenv \u0026lt;python_version\u0026gt; \u0026lt;environment_name\u0026gt;  #\u0026lt;pythonversion\u0026gt; is optional Activate a virtualenv\npyenv local myproject  #verify python version pyenv which python  #verify pip version pyenv which pip Then you may activate or deactivate a specific virtualenv (a bit like what happens with anaconda)\npyenv activate \u0026lt;environment_name\u0026gt;  pyenv deactivate Con pyenv is even possible to use concurrently different pyhton versions at the same time\u0026hellip;\nPyenv with Poetry https://blog.jayway.com/2019/12/28/pyenv-poetry-saviours-in-the-python-chaos/\nBonus: utilizzare oh-my-zsh You may use pyenv as a plugin on oh-my-zsh by adding pyenv inside the plugins section of the configuration file.\nInfo: Prevent conda from starting by default\nconda config --set auto_activate_base false\nbase libraries to install Installed base libraries list (you need to create base project to configure these libraries)\n Bandit Black Poetry Flake8 Mypy Isort Pylint Pytest  Fot this purpose, we recommend that you use Poetry on your projects to manage the necessary dependencies and libraries (both development and production).\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/code-style/bandit/",
	"title": "Bandit",
	"tags": [],
	"description": "",
	"content": "Bandit is a tool to find code security issues in Python.\nBandit is actually great, but it has to be configured according to code guidelines in order to discriminate security false positives.\nWith a bit of time you can set up a bandit configuration having\n secure module usage SQL injection disagnosis code which silently suppress exceptions many other more features  Moreover it is very useful for beginners since it pops up suggestion while you are writing code.\nTo use Bandit we would suggest to install the flake8-bandit extension.\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/gestire-dipendenze/poetry/",
	"title": "Poetry",
	"tags": [],
	"description": "",
	"content": "https://python-poetry.org/\nPoetry is a new approach of organizing Python projects that adapts to the most popular current languages and frameworks (such as node with npm or nuget for .NET)\nIt is, in essence, a package and dependency management tool, allowing you to manage packages, dependencies, and versions by merging both python version management in a specific project with the relevant dependencies, as well as introducing much more complex notions.\nThe following are the most essential elements introduced by Poetry:\n  Deterministic (and agile) project and library management\n  Creating builds and packages for the project is made easier with customisable commands.\n  rapidly publish packages on pypi\n  With a single command, you may trace project dependencies.\n   How to use Poetry The \u0026lsquo;pyproject.toml\u0026rsquo; file, which is produced when the project is launched, is at the core of Poetry.\nThis file allows you to declare all project attributes and manage the entire project (as if we were using a package.json on javascript).\nSo, let\u0026rsquo;s look at how to include poetry into a new project.\n# init poetry on a directory poetry init  # create a new poetry project poetry new \u0026lt;app_name\u0026gt;  # inside the project edit the: pyproject.tml as you wish  # If you want to use virtual environments files inside the folder specify: poetry config virtualenvs.in-project true  # If you do not specify that option venv are going to be kept inside its installation folder  # Compile the pyproject.toml file in order to source the virtual environment poetry shell  # Add new dependencies (al pyproject.toml) poetry add pandas  # Install new dependencies (poetry takes care of automagically populate the pyproject.toml file with newer deps) poetry install  # launch a file poetry run \u0026lt;script\u0026gt;  # Visualize venv path for this project (e anche l\u0026#39;elenco delle librerie) poetry show -v  # exit poetry exit ⚠ Attention ⚠ : When you use poetry shell on Windows, it automatically exits PowerShell and forces you to use cmd.\nIt is a known problem, but there is a way to solve it (a workaround)\nhttps://github.com/python-poetry/poetry/issues/2030\nHow may poetry be included into an established project?\nPerhaps it already has a requirements.txt file.\n# initialize poetry inside an existing directory poetry init  # maintain the .ven folder into your porject poetry config virtualenvs.in-project true  ## Import FROM requirements.txt TO poetry poetry add $( cat requirements.txt )  # If you do not have requirements.txt go on with the standard format Generate poetry requirements.txt\n# Create a requirements.txt file form Poetry configpoetry poetry export -f requirements.txt --output requirements.txt Ezample of a pyproject.toml\n[tool.poetry] name = \u0026#34;poetry-tutorial-project\u0026#34; version = \u0026#34;0.1.0\u0026#34; description = \u0026#34;Simple python project built with poetry\u0026#34; authors = [\u0026#34;Andrea Guzzo \u0026lt;andrea.guzzo92@gmail.com\u0026gt;\u0026#34;] maintainers = [\u0026#34;Andrea Guzzo \u0026lt;andrea.guzzo92@gmail.com\u0026gt;\u0026#34;] license = \u0026#34;MIT\u0026#34; readme = \u0026#34;README.md\u0026#34; homepage = \u0026#34;http://localhost:5000\u0026#34; repository = \u0026#34;https://github.com/jeydi/\u0026#34; documentation = \u0026#34;https://github.com/jeydi/\u0026#34; keywords = [ \t\u0026#34;Poetry\u0026#34;, \t\u0026#34;Venv\u0026#34;, \t\u0026#34;Virtual enviroments\u0026#34;, \t\u0026#34;Packages\u0026#34;, \t\u0026#34;Packaging\u0026#34; ]  [tool.poetry.dependencies] python = \u0026#34;^3.7\u0026#34; loguru = \u0026#34;*\u0026#34; psutil = \u0026#34;*\u0026#34; pandas = \u0026#34;*\u0026#34; numpy = \u0026#34;*\u0026#34; fastapi = \u0026#34;*\u0026#34; typer = \u0026#34;^0.3.2\u0026#34;  [tool.poetry.dev-dependencies] pytest = \u0026#34;^5.2\u0026#34;  [build-system] requires = [\u0026#34;poetry-core\u0026gt;=1.0.0\u0026#34;] build-backend = \u0026#34;poetry.core.masonry.api\u0026#34;  [tool.poetry.scripts] run = \u0026#34;wsgi:main\u0026#34;  [tool.poetry.urls] issues = \u0026#34;https://github.com/jeydi/\u0026#34; ⚠ Attention ⚠: Some libraries (for example, pandas) may have versioning issues with regard to dependent libraries. In this regard, it is advised that pip be installed as a dependent and updated to the most recent version.\n# Install pip  poetry add pip  # Or, after the.venv containing poetry is produced, update pip  # It is critical to have the.venv first  pip install —upgrade pip This is a workaround for a really long installation issues.\nPoetry is undoubtedly slower than virtualenv, but it is considerably safer and more strict because it first verifies the safety of all dependencies.\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/visual-studio-code/aggiungere-code-al-terminale/",
	"title": "Add tails to terminal",
	"tags": [],
	"description": "",
	"content": "A very interesting feature of Visual Studio Code is the addition of the command code file or folder\u0026gt; to the terminal, which opens a vscode window based on either file or folder on which you want to work (for example, by doing code. you may open the current cartella within vscode).\nTo do so, open the Command Palette and execute (closely) the following command: Shell command: Add the command 'code' to the PATH\nOn Windows, you may add the functionality by flagging Add to PATH during the vscode installation process.\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/struttura-di-progetto/cookiecutter/",
	"title": "cookiecutter",
	"tags": [],
	"description": "",
	"content": "Returning to the initial topic of project structure in Python (and many other languages and / or frameworks), each project is unique, however some projects have certain similar aspects.\nFor example, they frequently include a file with a list of dependencies and some tests, a web application requires a \u0026ldquo;main\u0026rdquo; and we want our team to have a structure that drives development in order for diverse projects to conform ( or at least try to do it).\nThis is when the term scaffolding comes into play.\nScaffolding is a notion that originated in the construction industry; when we wish to build, repair, or change anything, we need scaffolding surrounding the project to help keep it stable.\nThis principle is comparable in computer science: before starting a project, we need a ready framework that allows us to continue in an orderly manner during development.\nSo here we have cookiecutter.\nCookiecutter is a tool that lets you construct a Python project from scratch using an existing template (similar versions exist for many other programming languages and editors).\nhttps://github.com/cookiecutter/cookiecutter\nDocumentation: https://cookiecutter.readthedocs.io/en/1.7.2/\nCookiecutter usage:\n You choose a template to use for the project. Cookiecutter is opened with the project\u0026rsquo;s path, and the tool will ask you some questions to personalize the project\u0026rsquo;s construction. Scaffolding with cookiecutter will produce the template for you.  We put in cookie cutters (better to do it with pipx in order to use it globally everywhere)\npipx install cookiecutter Curated list of possible templates for your projects (you can find many online)\n https://github.com/cookiecutter/cookiecutter#a-pantry-full-of-cookiecutters  #Cloniamo un progetto con cookiecutter cookiecutter https://github.com/audreyr/cookiecutter-pypackage Cookiecutter is a highly valuable tool, but you must be cautious about how you use it and which tasks you use it for. It frequently installs and downloads a large number of items that we do not require or that are redundant.\nThe idea is to choose projects that are appropriate for you depending on the project you intend to use (small, medium, large). Alternatively, create templates for your projects or organization so that everyone is on the same page about what you want to accomplish.\nBuild a cookiecutter template from scratch Let\u0026rsquo;s have a look at how to make your own simple template with cookiecutter.\nThe documentation in this area is not very good and is out of current, however numerous examples may still be found online.\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/gestire-dipendenze/poetry-advance/",
	"title": "Poetry Advance",
	"tags": [],
	"description": "",
	"content": "Poetry is the most sofisticated Python dependency system available (up to 2020)\nIt allows you to go beyond simple dependency management, with functions such as: generate.lock files, allow project scaffolding with many customization possibilities, all available via CLI.\npoetry installation \u0026amp; init It is critical to consult to the official guide that details the processes for the various operating systems before installing Poetry.\nWe do not intentionally disclose installation instructions because they frequently change with new updates and versions. In this regard, the reference site is: original documentation\ncreate a project in python using Poetry poetry new poetry-tutorial-project The secret formula for each poetry-based project is the establishment of a file named pyproject.toml. This file contains information on everything in the project, including metadata, dependencies, libraries, scripts, and much more\u0026hellip;\nIf you\u0026rsquo;re familiar with node.js, we may treat the pyproject.toml file as a project package.json.\nPoetry pyproject.toml details\nDocumentazione: https://python-poetry.org/docs/pyproject/\n [tool.poetry] = basic descriptive metadata about the package you\u0026rsquo;re working on (such as package name, description, author, details, \u0026hellip;). Some options are only relevant if you intend to publish your package on Pypi. [tool.poetry.dependencies] = It enables you to establish application requirements that are absolutely needed for your program to run. It is also possible to provide the version of the package you wish to install (for example, Flask = \u0026ldquo;1.0.0\u0026rdquo;). If you just wish to define the most recent version, use \u0026ldquo;*.\u0026rdquo; You may also define the Python version necessary to run the project and your application. [tool.poetry.dev-dependencies] = Dev dependencies are all of the libraries that developers require in order to build and program the project, but which should not be used in production. These dependencies are not required for the application to run and will not be downloaded if it is \u0026ldquo;built\u0026rdquo; by default. [build-system] = This section is rarely changed; only alter it if you intend to update Poetry. [tool.poetry.scripts] = This is where you provide the program\u0026rsquo;s entry points, designating a function inside the modules required to run the application. In the example: run = \u0026ldquo;wsgi: main\u0026rdquo; indicates that we want to build a \u0026ldquo;run\u0026rdquo; command that will look in the file \u0026ldquo;[wsgi.py] (http://wsgi.py/)\u0026quot; for a function called: main(). With this option, the program may be launched from the CLI by typing: \u0026lsquo;poetry run\u0026rsquo; [tool.poetry.urls]: This parameter is optional and may be used to enter relevant links to resources, documentation, or other related to the project. It is required if you intend to release your package.  Depencies installation \u0026amp; mngmt poetry shell\nWhen you use this command in your project directory for the first time, Poetry establishes a Python virtual environment that is permanently connected with this project. Poetry provides an environment on a global system path rather than a folder holding your dependency libraries (like virtualenv does), therefore segregating the dependency source code from your project. Once this virtual environment has been built, it may be reactivated at any time by executing poetry shell in your project directory. To test how Poetry handles virtual environments, compare python output before and after prompting your project.\n**poetry install**\nInstall the dependencies listed in the pyproject.toml file. When a project\u0026rsquo;s dependencies are installed for the first time, a.lock file is produced that stores the real version numbers of each package installed (for example, if Flask = \u0026ldquo;*\u0026rdquo; resulted in a download of Flask version 1.0.0, the actual version number would be placed in.lock). If there is a .lock file, the version numbers in .lock take precedence over those in pyproject.toml.\n**poetry update**\nIt functions similarly to install, with the distinction that version numbers in .lock will NOT be obeyed. If newer versions of the packages in pyproject.toml are available, they will be installed and .lock will be changed accordingly.\n**poetry add [package-name]**\nA shortcut for adding a dependency in pyproject.toml. The package is installed as soon as it is added.\n**poetry remove [package-name]**\nRemoves a dependence from the project dependency list given in pyproject.toml.\n**poetry export -f requirements.txt \u0026gt; requirements.txt**\nThe contents of your project\u0026rsquo;s.lock file should be exported to requirements.txt. This is handy for handing work to developers who, for whatever reason, still use requirements.txt.\nYou can alternatively use the command poetry export -f requirements.txt —output reqtest.txt —without-hashes to export the dependencies to a separate file (reqtest.txt) and without the hashes that encrypt packets. This function might be beneficial if the standard command fails to install the requirements.txt file.\n**poetry env list --full-path**\nTake a look at the route and environment list.\nconfigs **poetry config**\n\u0026ldquo;Config\u0026rdquo; refers to environment-wide configuration, such as the virtual environment\u0026rsquo;s routes or environment variables. The —list option returns the current configuration values for your environment.\n**poetry check**\nLook for any issues in the pyproject.toml file.\n**poetry show**\nReturns a summary of all presently installed packages in the project, including dependent dependencies.\nExecute applications **poetry run [script-name]**\nExecutes the script described in the pyproject.toml section: [tool.poetry.scripts].\nBuild \u0026amp; publish package (project as a package) **poetry build**\nAllows you to create a build of the source code as well as the wheels archive.\n**poetry publish**\nPublish the build output to an external repository (such as Pypi)\nPoetry Getting Started Let\u0026rsquo;s see how to init poetry from scratch in a new project\n## initialize petry in a new empty folder poetry init  # alternatively create a new folder with app name with the command new poetry new \u0026lt;app_name\u0026gt;  ## noew you are able to edit files: pyproject.toml as you want  # If you wish to include the.venv folder in the project, follow these steps: poetry config virtualenvs.in-project true  # You must now cpmpile poetry to make the venv. # And then run the shell with the venv you specified. poetry shell  # IF required update pip python -m pip install --upgrade pip # this might happen if you encouter problem when installing deps  # Add and install dependency poetry add pandas  # Add and install dev dependency poetry add -D flake8  # If you declared the libraries in the pyproject.toml file, you may install them with this command. poetry install  # to tuna file within the pyproject.toml poetry run \u0026lt;script\u0026gt;  # Examine the virtual env route within the project (or outside of it) also included is a list of installed libraries. poetry show -v  # The default Python version that is presently in use is always visible. which python  # to exit poetry and venv exit  # remove venv with Poetry poetry env remove \u0026lt;python\u0026gt; Add Poetry TO an existing project (with requirements.txt)  # initialize poetry inside the directory poetry init  # compile data with poetry  # if you wish to include the venv inside the project remember to execute poetry config virtualenvs.in-project true  ## import requirements.txt (project libraries) inside poetry poetry add $( cat requirements.txt ) Generate FROM Poetry a requirements.txt file:\npoetry export -f requirements.txt \u0026gt; requirements.txt  # A more exhaustive example poetry export -f requirements.txt --output reqtest.txt --without-hashes # create a new file: reqtest.txt  #without hashes (i.e. without library signature) # is less secure because pip hashes may cause installation difficulties. ⚠ Attention ⚠ It is possible that you may need to update pip to install specific libraries in some cases; to do so, after you have built and activated your virtualenvironment with Python, perform the following:\n# Update pip python -m pip install --upgrade pip This problem can occur as soon as you run a library installation or do poetry install or poetry update.\n⚠ Attention ⚠ do not name any file or module, or your project as a name of a library that you will install using poetry.\nIn addition to being a bad practice in a project it will send poetry into confusion by giving you an AssertionError.\nhttps://github.com/python-poetry/poetry/issues/236\nIf you build a module, a folder, or a file with the same name as a library, the advise is to rename the offending file or folder, remove your virtualenvironment, and run again: To install a fresh version of the virtualenv, use poetry install.\nPoetry in VSCode Poetry is not yet incorporated into vscode or the official Python extension, therefore you must setup it manually to use it with vscode.\nTo let the project to use the virtual environment, a file must be defined by entering the virtual environment\u0026rsquo;s reference path produced with poetry.\n Type poetry env list —full-path at the terminal. and copy the path that belongs to poetry\u0026rsquo;s virtual environment (venv). Within the project, make a new folder called .vscode. Within the folder, make a file called settings.json In the file, add the following configuration:  {  \u0026#34;python.pythonPath\u0026#34;: \u0026#34;\u0026lt;copied path\u0026gt;\u0026#34; }  Relaunch vscode, and the Python version you made with Poetry will be utilized automatically when you open a .py file.  Always remember to type poetry shell into the terminal to launch the environment.\nRemember not to push the newly produced vscode settings to your remote git repository so that they do not override those of your colleagues (insert the .vscode folder into the gitignore file).\nstill another way\nFrom the terminal, start the project.\n# tell poetry to locally generate venv poetry config virtualenvs.in-project true --local poetry config virtualenvs.create true --local poetry config settings.virtualenvs.in-project true  # then launch poetry poetry install As a result of creating a virtualenv folder within the project, vscode will recognize that this is the default virtualenv to use rather than the global one.\nIf you wish to stop using .venv within the project, you may do the following:\n# tell poetry not to use venv inside the proj folder poetry config virtualenvs.in-project false --local poetry config virtualenvs.create false --local poetry config settings.virtualenvs.in-project false Pyproject.toml example Here\u0026rsquo;s an example of a pyproject.toml file you may use in your projects (obviously with the appropriate changes and customizations)\n[tool.poetry] name = \u0026#34;poetry-tutorial-project\u0026#34; version = \u0026#34;0.1.0\u0026#34; description = \u0026#34;Simple python project built with poetry\u0026#34; authors = [\u0026#34;Andrea Guzzo \u0026lt;andrea.guzzo92@gmail.com\u0026gt;\u0026#34;] maintainers = [\u0026#34;Andrea Guzzo \u0026lt;andrea.guzzo92@gmail.com\u0026gt;\u0026#34;] license = \u0026#34;MIT\u0026#34; readme = \u0026#34;README.md\u0026#34; homepage = \u0026#34;http://localhost:5000\u0026#34; repository = \u0026#34;https://github.com/jeydi/\u0026#34; documentation = \u0026#34;https://github.com/jeydi/\u0026#34; keywords = [ \t\u0026#34;Poetry\u0026#34;, \t\u0026#34;Venv\u0026#34;, \t\u0026#34;Virtual enviroments\u0026#34;, \t\u0026#34;Packages\u0026#34;, \t\u0026#34;Packaging\u0026#34; ]  [tool.poetry.dependencies] python = \u0026#34;^3.7\u0026#34; loguru = \u0026#34;*\u0026#34; psutil = \u0026#34;*\u0026#34; pandas = \u0026#34;*\u0026#34; numpy = \u0026#34;*\u0026#34; fastapi = \u0026#34;*\u0026#34; typer = \u0026#34;^0.3.2\u0026#34;  [tool.poetry.dev-dependencies] pytest = \u0026#34;^5.2\u0026#34;  [build-system] requires = [\u0026#34;poetry-core\u0026gt;=1.0.0\u0026#34;] build-backend = \u0026#34;poetry.core.masonry.api\u0026#34;  [tool.poetry.scripts] run = \u0026#34;wsgi:main\u0026#34;  [tool.poetry.urls] issues = \u0026#34;https://github.com/jeydi/\u0026#34; Aggiornare poetry Updating poetry to the latest stable versione is as simple as that:\n# update poetry to [latest] poetry self update  # update poetry to [latest-dev] poetry self update --preview Delete poetry To remove poetry you can execute these scripts\n# Uninstall poetry python get-poetry.py --uninstall  # Another method (optional) # Setting the POETRY_UNINSTALL env variable befor executing the installer POETRY_UNINSTALL=1 python get-poetry.py Enable completion for bash or zsh PùPoetry supports terminal autocomplete for a variety of command-line interfaces (CLIs) such as bash, zsh, and fish.\nIf you want additional information about these features, type: poetry help completions.\npoetry completions bash \u0026gt; /etc/bash_completion.d/poetry.bash-completion  # Bash (Homebrew) poetry completions bash \u0026gt; $(brew --prefix)/etc/bash_completion.d/poetry.bash-completion  # Zsh poetry completions zsh \u0026gt; ~/.zfunc/_poetry  # Oh-My-Zsh mkdir $ZSH_CUSTOM/plugins/poetry poetry completions zsh \u0026gt; $ZSH_CUSTOM/plugins/poetry/_poetry you need to restart the shell to apply changes\n⚠ Attention ⚠ (some details):\nFor zsh you must add the following line into ~/.zshrc profile before compinit\nfpath+=~/.zfunc For oh-my-zsh you must then enable poetry in your ~/.zshrc plugin\nplugins(  poetry  ...  ) Deploy How to put poetry into production with Docker:\nHere are the references:\n https://medium.com/@harpalsahota/dockerizing-python-poetry-applications-1aa3acb76287 docker caching: https://pythonspeed.com/articles/poetry-vs-docker-caching/ Production Ready Docker packaging for python developers: https://pythonspeed.com/docker/#articles-the-basics-of-docker-packaging  In this regard, we provide an example Dockerfile that you may use as a starting point for your deployment (even for production images)\nDockerfile\nFROM python:3.8  # Metadata LABEL name=\u0026#34;PBG Poetry Example\u0026#34; LABEL maintainer=\u0026#34;PBG\u0026#34; LABEL version=\u0026#34;0.1\u0026#34;  ARG YOUR_ENV=\u0026#34;virtualenv\u0026#34;  ENV YOUR_ENV=${YOUR_ENV} \\  PYTHONFAULTHANDLER=1 \\  PYTHONUNBUFFERED=1 \\  PYTHONHASHSEED=random \\  PIP_NO_CACHE_DIR=off \\  PIP_DISABLE_PIP_VERSION_CHECK=on \\  PIP_DEFAULT_TIMEOUT=100 \\  POETRY_VERSION=1.1.6 \\  LC_ALL=C.UTF-8 \\  LANG=C.UTF-8  # System deps: RUN DEBIAN_FRONTEND=noninteractive apt update \u0026amp;\u0026amp; apt install -y libpq-dev gcc  # Install poetry RUN pip install \u0026#34;poetry==$POETRY_VERSION\u0026#34;  # Copy only requirements to cache them in docker layer WORKDIR /app  #Copy all the project files COPY . . # Install libraries  RUN poetry config virtualenvs.create false \\  \u0026amp;\u0026amp; poetry install $(test \u0026#34;$YOUR_ENV\u0026#34; = production) --no-dev --no-interaction --no-ansi  # Set the launching script exec RUN chmod +x launch.sh  # Launch the script for cron CMD [\u0026#34;bash\u0026#34;, \u0026#34;launch.sh\u0026#34;]  # Launch main python script # CMD [\u0026#34;gunicorn\u0026#34;, \u0026#34;-w\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;-b\u0026#34;, \u0026#34;0.0.0.0:8000\u0026#34;, \u0026#34;core.app:app\u0026#34;] Documentation and useful links Official Documentation (really on point) : https://python-poetry.org/docs/basic-usage/\nhttps://hackersandslackers.com/python-poetry-package-manager/\nhttps://www.youtube.com/watch?v=QX_Nhu1zhlg\u0026amp;ab_channel=PyGotham2019\nBuild CLI Utilities with Poetry and Typer: https://www.pluralsight.com/tech-blog/python-cli-utilities-with-poetry-and-typer/\nCompare dependency manager: https://towardsdatascience.com/devops-for-data-science-making-your-python-project-reproducible-f55646e110fa\nput Poetry into Production (with Docker): https://stackoverflow.com/questions/53835198/integrating-python-poetry-with-docker\nData Science PRO with Poetry + Jupyter + VSCode: https://medium.com/analytics-vidhya/setting-up-data-science-python-projects-with-vscode-poetry-jupyter-b96efeea24c8\nPoetry Configure Workspace:\nhttps://zhauniarovich.com/post/2020/2020-02-configuring-python-workspace-p2/\nTo solve problems with psycopg2 and Python\nhttps://blog.vince.id/installing-psycopg2-on-macos\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/struttura-di-progetto/costruire-un-progetto/",
	"title": "Build a project",
	"tags": [],
	"description": "",
	"content": "How to set up project with acquired tools? Let\u0026rsquo;s go through all of the procedures required to create a Python project using the tools shown in this article.\nThis tutorial is intended to assist people who are approaching this new technique of carrying out projects using Python for the first time in order to develop a first version of the project that is up and running.\nIt also intends to readily bring other members of the team to use these tools in order for them to become acquainted with them as soon as possible, therefore creating a legitimate reference for the project.\nIf you find any difficulties, mistakes, or inaccuracies in this guide, please let us know by posting bugs on gitlab or writing to us directly.\nInstall requirements The first step is to install all of the required tools.\nObviously, we presume that you all have a Linux, Windows, or MacOS system with a Python version installed that is at least equivalent (or better) than Python 3.6.X.\nInstall Pyenv While not required, but strongly encouraged, the first step is to install pyenv to make it easier to use and install a specific version of Python for a project.\nInstall Poetry Initial config of Poetry for a project Install libraries DevelopmentL libraries\nThe development libraries include all of the libraries required to create source code, such as a linter, debugger, code normalization, syntax check, and so on.\npoetry add -D flake8 flake8-isort flake8-builtins autopep8 pylint bandit black\nEDA Python libraries\nIf Jupyter is not an essential necessity for using the project in production, it is advised to install data exploration libraries (such as Jupyter) in development mode.\npoetry add -D jupyter jupyterlab\nFlake8 config "
},
{
	"uri": "https://pythonbiellagroup.it/en/visual-studio-code/usare-il-debbuger/",
	"title": "debugger usage",
	"tags": [],
	"description": "",
	"content": "It is possible to create a specific configuration of debugger settings for each project in order to debug on vscode and so launch different files.\nFurthermore, while you are in the debug section, VSCode provides a tool that allows you to generate a specific configuration based on the framework or functionality that you are attempting to use via a template.\nUsing this procedure, a file called launch.json will be created within the project\u0026rsquo;s directory: .vscode, which may be corrupted.\nAn example of configuration (con flask e con un file singolo)\n{  // Use IntelliSense to learn about possible attributes.  // Hover to view descriptions of existing attributes.  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387  \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;,  \u0026#34;configurations\u0026#34;: [  {  \u0026#34;name\u0026#34;: \u0026#34;Python: Current File\u0026#34;,  \u0026#34;type\u0026#34;: \u0026#34;python\u0026#34;,  \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;,  \u0026#34;program\u0026#34;: \u0026#34;${file}\u0026#34;,  \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;  },  {  \u0026#34;name\u0026#34;: \u0026#34;Flask Backend\u0026#34;,  \u0026#34;type\u0026#34;: \u0026#34;python\u0026#34;,  \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;,  \u0026#34;port\u0026#34;: 8000,  \u0026#34;host\u0026#34;: \u0026#34;localhost\u0026#34;,  \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}/server.py\u0026#34;,  \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;,  \u0026#34;env\u0026#34;: {  \u0026#34;API_ENDPOINT_PORT\u0026#34;: \u0026#34;8000\u0026#34;,  \u0026#34;VERBOSITY\u0026#34;: \u0026#34;debug\u0026#34;,  \u0026#34;PLANT\u0026#34;: \u0026#34;demo\u0026#34;  }  }  ] } "
},
{
	"uri": "https://pythonbiellagroup.it/en/gestire-dipendenze/pipx/",
	"title": "Pipx",
	"tags": [],
	"description": "",
	"content": "\u0026ldquo;A project should have its own dependencies and should rest on its own legs, it should be atomic.\u0026rdquo;\nWell, that is certainly true, but it is even truer that there are some libraries that are pretty always used thoroughout your projects. In this case these libraries should be somewhat global to you system instead of local.\nAn example could be linter and code formatters e.g. black or flake8\nThankfully there is pipx which creates a \u0026ldquo;global version\u0026rdquo; of the library you are installing, making it available at any time in any venv.\nhttps://github.com/pipxproject/pipx\nFor the most part when you are installing libraries that you are willing to share for almost any project you are jumping into you should consider running pipx install my_package instead of pip install my_package\n# list all libraries pipx list  # remove a package pipx uninstall my_package  # launch a library installed pipx run black my_file  # you can also run a specific version pipx run --spec black==18.3a1 black --version Whenever you are launching pipx run my_package what happens is a venv is created, the command proptly executed and then immeditately destroyed.\nOn VScode there a una tantum setting to make pipx working\n# install falke pipx install flake8  # path where flake is installed in which flake8 \u0026lt;path\u0026gt;  # copy the bin path and pass to VScode settings.json \u0026#34;python.linting.flake8Path\u0026#34;: \u0026#34;/Users/YOUR_USERNAME/.local/bin/flake8\u0026#34; "
},
{
	"uri": "https://pythonbiellagroup.it/en/visual-studio-code/testing/",
	"title": "Testing framework",
	"tags": [],
	"description": "",
	"content": "After installing the Python extension, a new feature appears within VSCode: the ability to run tests through an interface with Python.\nTo use this feature, open the Command Palette and select Python: Configure Tests. From the list of test frameworks that will be displayed, choose your preferred framework (say pytest).\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/pyenv/",
	"title": "pyenv",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/versions/",
	"title": "versions",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/code/",
	"title": "code",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/dipendenze/",
	"title": "dipendenze",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/docs/",
	"title": "docs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/documentazione/",
	"title": "documentazione",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/estensioni/",
	"title": "estensioni",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/extra/",
	"title": "extra",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/ide/",
	"title": "ide",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/ipython/",
	"title": "ipython",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/mkdocs/",
	"title": "mkdocs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/",
	"title": "Python Biella Group",
	"tags": [],
	"description": "",
	"content": "Welcome 👨‍💻 PythonBiellaGroup is a Python community whose aim is to study and learn Python lang from every angles.\nThis website\u0026rsquo;s goal is to collect feedbacks and share community knowledge with respect to libraries, caveats, best practices and new technologies.\nFor any issues we would like to refer to our GitHub page. You can use the issue page to submit new features, idea, arguments and to report bugs and problems.\nYou can find all our contacts, material and information on this link In particular you can find information on:\n Telegram channel that we use to communicate and discuss within the community YouTube channel with all the videos and recordings of the evenings Github: with all our code and open source material All our channels and social contacts   🚀 Projects \u0026amp; Repositories All of the material used during our meetings\nDocs on modern Pyhton development\ncommunity exercies, show us your solution!\n🤲 Do you want to help us? Are you excited about our project? let\u0026rsquo;s contribute to the community!\nPlease submit us your proposals, whatever you are interested in. Help us building our network, blog, social and populate our repo. For any additional enquiry, check out Telegram!\nBut most of all: A huge Thank You for being here\n"
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/repl/",
	"title": "REPL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/settings/",
	"title": "settings",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/style/",
	"title": "style",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/venv/",
	"title": "venv",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/tags/vscode/",
	"title": "vscode",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://pythonbiellagroup.it/en/gestire-versioni-di-python/pyenv/",
	"title": "Pyenv Beginner",
	"tags": [],
	"description": "",
	"content": "Pyenv allows you to handle several versions of Python installed on your PC in a very simple and fast manner.\nIt\u0026rsquo;s basic and unobtrusive, and it works on any operating system.\n Allows you to modify the ** global version of Python ** or the ** local version of Python ** for each project or user. Enables you to maintain a local version of each project with its own Python version. Allows you to ** override ** the Python version as environment variables (no more manually managing them). Allows you to search for and manage different Python versions (with tox)  Some critical considerations\n There is no bootstrap problem because it is built entirely of shell scripts. It is not necessary to load it inside your shell; simply enter its directory in the environment variables and it works \u0026ldquo;on its own.\u0026rdquo; It also allows (and possibly requires) more efficient management of virtual environments.  Very good documentation with a lot of internet support.\n https://github.com/pyenv/pyenv  main commands\n# list all pyhton versions available pyenv install --list  # Install a specific Python version pyenv install 3.7.4  # Visualize where Python versions are installed pyenv versions  # Set a global Python version with pyenv ( used by all the OS) pyenv global 3.7.4  # Set a local Python version (used for this specific project) pyenv local 3.7.4 # it creates .python-version file  # By deleting the file you also delete the local .python-version installation rm .python-version  # change Pyhton shell for the current session pyenv shell system We addressed the problem of rapidly and efficiently changing the version of Python installed on your PC with pyenv.\nThere is still the issue of managing dependencies (libraries) across several projects.\nPython has a major limitation: you cannot install several versions of the same library (package) in the same version of Python.\nThe virtualenvironments have arrived.\nIt is critical to utilize different virtualenvs for each Python project, beginning with the simplest.\n"
}]